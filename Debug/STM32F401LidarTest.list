
STM32F401LidarTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b0  080061b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b8  080061b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000074  08006234  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006234  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e32f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  0002e3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cc1  00000000  00000000  00031f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104f9  00000000  00000000  00049c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091086  00000000  00000000  0005a132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb1b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  000eb208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006060 	.word	0x08006060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006060 	.word	0x08006060

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000d72:	232d      	movs	r3, #45	; 0x2d
 8000d74:	73bb      	strb	r3, [r7, #14]
 8000d76:	e011      	b.n	8000d9c <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	3b2d      	subs	r3, #45	; 0x2d
 8000d80:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <VL53L1X_SensorInit+0xd4>)
 8000d82:	5cd2      	ldrb	r2, [r2, r3]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fac8 	bl	800231c <VL53L1_WrByte>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73bb      	strb	r3, [r7, #14]
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b87      	cmp	r3, #135	; 0x87
 8000da0:	d9ea      	bls.n	8000d78 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f889 	bl	8000ebc <VL53L1X_StartRanging>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8000db8:	e00b      	b.n	8000dd2 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8000dba:	f107 020d 	add.w	r2, r7, #13
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f8aa 	bl	8000f1c <VL53L1X_CheckForDataReady>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8000dd2:	7b7b      	ldrb	r3, [r7, #13]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f0      	beq.n	8000dba <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f82c 	bl	8000e38 <VL53L1X_ClearInterrupt>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f87d 	bl	8000eec <VL53L1X_StopRanging>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	2209      	movs	r2, #9
 8000e00:	2108      	movs	r1, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fa8a 	bl	800231c <VL53L1_WrByte>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	2200      	movs	r2, #0
 8000e16:	210b      	movs	r1, #11
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fa7f 	bl	800231c <VL53L1_WrByte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	0800608c 	.word	0x0800608c

08000e38 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2186      	movs	r1, #134	; 0x86
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fa65 	bl	800231c <VL53L1_WrByte>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000e78:	f107 020e 	add.w	r2, r7, #14
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	2130      	movs	r1, #48	; 0x30
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fae7 	bl	8002454 <VL53L1_RdByte>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	701a      	strb	r2, [r3, #0]
	return status;
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	2240      	movs	r2, #64	; 0x40
 8000ece:	2187      	movs	r1, #135	; 0x87
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fa23 	bl	800231c <VL53L1_WrByte>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2200      	movs	r2, #0
 8000efe:	2187      	movs	r1, #135	; 0x87
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fa0b 	bl	800231c <VL53L1_WrByte>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000f2c:	f107 020d 	add.w	r2, r7, #13
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff97 	bl	8000e68 <VL53L1X_GetInterruptPolarity>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000f44:	f107 020e 	add.w	r2, r7, #14
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	2131      	movs	r1, #49	; 0x31
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fa81 	bl	8002454 <VL53L1_RdByte>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10c      	bne.n	8000f7e <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	7b7a      	ldrb	r2, [r7, #13]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d103      	bne.n	8000f78 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e002      	b.n	8000f7e <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	460a      	mov	r2, r1
 8000f94:	80fb      	strh	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fa2a 	bl	8001400 <VL53L1X_GetDistanceMode>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0f6      	b.n	80011ae <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8000fc0:	89bb      	ldrh	r3, [r7, #12]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 8082 	bne.w	80010cc <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fce:	d06b      	beq.n	80010a8 <VL53L1X_SetTimingBudgetInMs+0x11e>
 8000fd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd4:	dc77      	bgt.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fd6:	2bc8      	cmp	r3, #200	; 0xc8
 8000fd8:	d057      	beq.n	800108a <VL53L1X_SetTimingBudgetInMs+0x100>
 8000fda:	2bc8      	cmp	r3, #200	; 0xc8
 8000fdc:	dc73      	bgt.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d044      	beq.n	800106c <VL53L1X_SetTimingBudgetInMs+0xe2>
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	dc6f      	bgt.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fe6:	2b32      	cmp	r3, #50	; 0x32
 8000fe8:	d031      	beq.n	800104e <VL53L1X_SetTimingBudgetInMs+0xc4>
 8000fea:	2b32      	cmp	r3, #50	; 0x32
 8000fec:	dc6b      	bgt.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000fee:	2b21      	cmp	r3, #33	; 0x21
 8000ff0:	d020      	beq.n	8001034 <VL53L1X_SetTimingBudgetInMs+0xaa>
 8000ff2:	2b21      	cmp	r3, #33	; 0x21
 8000ff4:	dc67      	bgt.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d002      	beq.n	8001000 <VL53L1X_SetTimingBudgetInMs+0x76>
 8000ffa:	2b14      	cmp	r3, #20
 8000ffc:	d00d      	beq.n	800101a <VL53L1X_SetTimingBudgetInMs+0x90>
 8000ffe:	e062      	b.n	80010c6 <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	221d      	movs	r2, #29
 8001004:	215e      	movs	r1, #94	; 0x5e
 8001006:	4618      	mov	r0, r3
 8001008:	f001 f9b4 	bl	8002374 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	2227      	movs	r2, #39	; 0x27
 8001010:	2161      	movs	r1, #97	; 0x61
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f9ae 	bl	8002374 <VL53L1_WrWord>
					0x0027);
			break;
 8001018:	e0c7      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2251      	movs	r2, #81	; 0x51
 800101e:	215e      	movs	r1, #94	; 0x5e
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f9a7 	bl	8002374 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	226e      	movs	r2, #110	; 0x6e
 800102a:	2161      	movs	r1, #97	; 0x61
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f9a1 	bl	8002374 <VL53L1_WrWord>
					0x006E);
			break;
 8001032:	e0ba      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	22d6      	movs	r2, #214	; 0xd6
 8001038:	215e      	movs	r1, #94	; 0x5e
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f99a 	bl	8002374 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	226e      	movs	r2, #110	; 0x6e
 8001044:	2161      	movs	r1, #97	; 0x61
 8001046:	4618      	mov	r0, r3
 8001048:	f001 f994 	bl	8002374 <VL53L1_WrWord>
					0x006E);
			break;
 800104c:	e0ad      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001054:	215e      	movs	r1, #94	; 0x5e
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f98c 	bl	8002374 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001062:	2161      	movs	r1, #97	; 0x61
 8001064:	4618      	mov	r0, r3
 8001066:	f001 f985 	bl	8002374 <VL53L1_WrWord>
					0x01E8);
			break;
 800106a:	e09e      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001072:	215e      	movs	r1, #94	; 0x5e
 8001074:	4618      	mov	r0, r3
 8001076:	f001 f97d 	bl	8002374 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001080:	2161      	movs	r1, #97	; 0x61
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f976 	bl	8002374 <VL53L1_WrWord>
					0x0388);
			break;
 8001088:	e08f      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001090:	215e      	movs	r1, #94	; 0x5e
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f96e 	bl	8002374 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	f240 4296 	movw	r2, #1174	; 0x496
 800109e:	2161      	movs	r1, #97	; 0x61
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f967 	bl	8002374 <VL53L1_WrWord>
					0x0496);
			break;
 80010a6:	e080      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f240 5291 	movw	r2, #1425	; 0x591
 80010ae:	215e      	movs	r1, #94	; 0x5e
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f95f 	bl	8002374 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	f240 52c1 	movw	r2, #1473	; 0x5c1
 80010bc:	2161      	movs	r1, #97	; 0x61
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f958 	bl	8002374 <VL53L1_WrWord>
					0x05C1);
			break;
 80010c4:	e071      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
			break;
 80010ca:	e06e      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d2:	d058      	beq.n	8001186 <VL53L1X_SetTimingBudgetInMs+0x1fc>
 80010d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d8:	dc64      	bgt.n	80011a4 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010da:	2bc8      	cmp	r3, #200	; 0xc8
 80010dc:	d044      	beq.n	8001168 <VL53L1X_SetTimingBudgetInMs+0x1de>
 80010de:	2bc8      	cmp	r3, #200	; 0xc8
 80010e0:	dc60      	bgt.n	80011a4 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d031      	beq.n	800114a <VL53L1X_SetTimingBudgetInMs+0x1c0>
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	dc5c      	bgt.n	80011a4 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010ea:	2b32      	cmp	r3, #50	; 0x32
 80010ec:	d020      	beq.n	8001130 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 80010ee:	2b32      	cmp	r3, #50	; 0x32
 80010f0:	dc58      	bgt.n	80011a4 <VL53L1X_SetTimingBudgetInMs+0x21a>
 80010f2:	2b14      	cmp	r3, #20
 80010f4:	d002      	beq.n	80010fc <VL53L1X_SetTimingBudgetInMs+0x172>
 80010f6:	2b21      	cmp	r3, #33	; 0x21
 80010f8:	d00d      	beq.n	8001116 <VL53L1X_SetTimingBudgetInMs+0x18c>
 80010fa:	e053      	b.n	80011a4 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	221e      	movs	r2, #30
 8001100:	215e      	movs	r1, #94	; 0x5e
 8001102:	4618      	mov	r0, r3
 8001104:	f001 f936 	bl	8002374 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2222      	movs	r2, #34	; 0x22
 800110c:	2161      	movs	r1, #97	; 0x61
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f930 	bl	8002374 <VL53L1_WrWord>
					0x0022);
			break;
 8001114:	e049      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2260      	movs	r2, #96	; 0x60
 800111a:	215e      	movs	r1, #94	; 0x5e
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f929 	bl	8002374 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	226e      	movs	r2, #110	; 0x6e
 8001126:	2161      	movs	r1, #97	; 0x61
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f923 	bl	8002374 <VL53L1_WrWord>
					0x006E);
			break;
 800112e:	e03c      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	22ad      	movs	r2, #173	; 0xad
 8001134:	215e      	movs	r1, #94	; 0x5e
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f91c 	bl	8002374 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	22c6      	movs	r2, #198	; 0xc6
 8001140:	2161      	movs	r1, #97	; 0x61
 8001142:	4618      	mov	r0, r3
 8001144:	f001 f916 	bl	8002374 <VL53L1_WrWord>
					0x00C6);
			break;
 8001148:	e02f      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001150:	215e      	movs	r1, #94	; 0x5e
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f90e 	bl	8002374 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800115e:	2161      	movs	r1, #97	; 0x61
 8001160:	4618      	mov	r0, r3
 8001162:	f001 f907 	bl	8002374 <VL53L1_WrWord>
					0x01EA);
			break;
 8001166:	e020      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	f240 22d9 	movw	r2, #729	; 0x2d9
 800116e:	215e      	movs	r1, #94	; 0x5e
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f8ff 	bl	8002374 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 800117c:	2161      	movs	r1, #97	; 0x61
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f8f8 	bl	8002374 <VL53L1_WrWord>
					0x02F8);
			break;
 8001184:	e011      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f240 428f 	movw	r2, #1167	; 0x48f
 800118c:	215e      	movs	r1, #94	; 0x5e
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f8f0 	bl	8002374 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800119a:	2161      	movs	r1, #97	; 0x61
 800119c:	4618      	mov	r0, r3
 800119e:	f001 f8e9 	bl	8002374 <VL53L1_WrWord>
					0x04A4);
			break;
 80011a2:	e002      	b.n	80011aa <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
			break;
 80011a8:	bf00      	nop
		}
	}
	return status;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	215e      	movs	r1, #94	; 0x5e
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 f978 	bl	80024c4 <VL53L1_RdWord>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4313      	orrs	r3, r2
 80011dc:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80011de:	89bb      	ldrh	r3, [r7, #12]
 80011e0:	f240 5291 	movw	r2, #1425	; 0x591
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d05b      	beq.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xea>
 80011e8:	f240 5291 	movw	r2, #1425	; 0x591
 80011ec:	4293      	cmp	r3, r2
 80011ee:	dc5c      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 80011f0:	f240 428f 	movw	r2, #1167	; 0x48f
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d053      	beq.n	80012a0 <VL53L1X_GetTimingBudgetInMs+0xea>
 80011f8:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80011fc:	da55      	bge.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 80011fe:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001202:	4293      	cmp	r3, r2
 8001204:	d048      	beq.n	8001298 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8001206:	f240 32e1 	movw	r2, #993	; 0x3e1
 800120a:	4293      	cmp	r3, r2
 800120c:	dc4d      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800120e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001212:	4293      	cmp	r3, r2
 8001214:	d03c      	beq.n	8001290 <VL53L1X_GetTimingBudgetInMs+0xda>
 8001216:	f240 22e1 	movw	r2, #737	; 0x2e1
 800121a:	4293      	cmp	r3, r2
 800121c:	dc45      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800121e:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001222:	4293      	cmp	r3, r2
 8001224:	d038      	beq.n	8001298 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8001226:	f240 22d9 	movw	r2, #729	; 0x2d9
 800122a:	4293      	cmp	r3, r2
 800122c:	dc3d      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800122e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001232:	d02d      	beq.n	8001290 <VL53L1X_GetTimingBudgetInMs+0xda>
 8001234:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001238:	dc37      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800123a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 800123e:	d023      	beq.n	8001288 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001240:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001244:	dc31      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001246:	2bd6      	cmp	r3, #214	; 0xd6
 8001248:	d01a      	beq.n	8001280 <VL53L1X_GetTimingBudgetInMs+0xca>
 800124a:	2bd6      	cmp	r3, #214	; 0xd6
 800124c:	dc2d      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800124e:	2bad      	cmp	r3, #173	; 0xad
 8001250:	d01a      	beq.n	8001288 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8001252:	2bad      	cmp	r3, #173	; 0xad
 8001254:	dc29      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001256:	2b60      	cmp	r3, #96	; 0x60
 8001258:	d012      	beq.n	8001280 <VL53L1X_GetTimingBudgetInMs+0xca>
 800125a:	2b60      	cmp	r3, #96	; 0x60
 800125c:	dc25      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 800125e:	2b51      	cmp	r3, #81	; 0x51
 8001260:	d00a      	beq.n	8001278 <VL53L1X_GetTimingBudgetInMs+0xc2>
 8001262:	2b51      	cmp	r3, #81	; 0x51
 8001264:	dc21      	bgt.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001266:	2b1d      	cmp	r3, #29
 8001268:	d002      	beq.n	8001270 <VL53L1X_GetTimingBudgetInMs+0xba>
 800126a:	2b1e      	cmp	r3, #30
 800126c:	d004      	beq.n	8001278 <VL53L1X_GetTimingBudgetInMs+0xc2>
 800126e:	e01c      	b.n	80012aa <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	220f      	movs	r2, #15
 8001274:	801a      	strh	r2, [r3, #0]
			break;
 8001276:	e01d      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2214      	movs	r2, #20
 800127c:	801a      	strh	r2, [r3, #0]
			break;
 800127e:	e019      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2221      	movs	r2, #33	; 0x21
 8001284:	801a      	strh	r2, [r3, #0]
			break;
 8001286:	e015      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2232      	movs	r2, #50	; 0x32
 800128c:	801a      	strh	r2, [r3, #0]
			break;
 800128e:	e011      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2264      	movs	r2, #100	; 0x64
 8001294:	801a      	strh	r2, [r3, #0]
			break;
 8001296:	e00d      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	22c8      	movs	r2, #200	; 0xc8
 800129c:	801a      	strh	r2, [r3, #0]
			break;
 800129e:	e009      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a6:	801a      	strh	r2, [r3, #0]
			break;
 80012a8:	e004      	b.n	80012b4 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80012b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	80fb      	strh	r3, [r7, #6]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80012d4:	f107 020c 	add.w	r2, r7, #12
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff6a 	bl	80011b6 <VL53L1X_GetTimingBudgetInMs>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <VL53L1X_SetDistanceMode+0x38>
		return 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e07f      	b.n	80013f8 <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d002      	beq.n	8001304 <VL53L1X_SetDistanceMode+0x44>
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d033      	beq.n	800136a <VL53L1X_SetDistanceMode+0xaa>
 8001302:	e065      	b.n	80013d0 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	2214      	movs	r2, #20
 8001308:	214b      	movs	r1, #75	; 0x4b
 800130a:	4618      	mov	r0, r3
 800130c:	f001 f806 	bl	800231c <VL53L1_WrByte>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2207      	movs	r2, #7
 8001318:	2160      	movs	r1, #96	; 0x60
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fffe 	bl	800231c <VL53L1_WrByte>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2205      	movs	r2, #5
 8001328:	2163      	movs	r1, #99	; 0x63
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fff6 	bl	800231c <VL53L1_WrByte>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2238      	movs	r2, #56	; 0x38
 8001338:	2169      	movs	r1, #105	; 0x69
 800133a:	4618      	mov	r0, r3
 800133c:	f000 ffee 	bl	800231c <VL53L1_WrByte>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	f240 7205 	movw	r2, #1797	; 0x705
 800134a:	2178      	movs	r1, #120	; 0x78
 800134c:	4618      	mov	r0, r3
 800134e:	f001 f811 	bl	8002374 <VL53L1_WrWord>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	f240 6206 	movw	r2, #1542	; 0x606
 800135c:	217a      	movs	r1, #122	; 0x7a
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f808 	bl	8002374 <VL53L1_WrWord>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
		break;
 8001368:	e035      	b.n	80013d6 <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	220a      	movs	r2, #10
 800136e:	214b      	movs	r1, #75	; 0x4b
 8001370:	4618      	mov	r0, r3
 8001372:	f000 ffd3 	bl	800231c <VL53L1_WrByte>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	220f      	movs	r2, #15
 800137e:	2160      	movs	r1, #96	; 0x60
 8001380:	4618      	mov	r0, r3
 8001382:	f000 ffcb 	bl	800231c <VL53L1_WrByte>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	220d      	movs	r2, #13
 800138e:	2163      	movs	r1, #99	; 0x63
 8001390:	4618      	mov	r0, r3
 8001392:	f000 ffc3 	bl	800231c <VL53L1_WrByte>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	22b8      	movs	r2, #184	; 0xb8
 800139e:	2169      	movs	r1, #105	; 0x69
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 ffbb 	bl	800231c <VL53L1_WrByte>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f640 720d 	movw	r2, #3853	; 0xf0d
 80013b0:	2178      	movs	r1, #120	; 0x78
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 ffde 	bl	8002374 <VL53L1_WrWord>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	f640 620e 	movw	r2, #3598	; 0xe0e
 80013c2:	217a      	movs	r1, #122	; 0x7a
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 ffd5 	bl	8002374 <VL53L1_WrWord>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]
		break;
 80013ce:	e002      	b.n	80013d6 <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
		break;
 80013d4:	bf00      	nop
	}

	if (status == 0)
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10a      	bne.n	80013f4 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 80013de:	89ba      	ldrh	r2, [r7, #12]
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fdd0 	bl	8000f8a <VL53L1X_SetTimingBudgetInMs>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80013f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001410:	f107 020e 	add.w	r2, r7, #14
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	214b      	movs	r1, #75	; 0x4b
 8001418:	4618      	mov	r0, r3
 800141a:	f001 f81b 	bl	8002454 <VL53L1_RdByte>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4313      	orrs	r3, r2
 8001428:	b25b      	sxtb	r3, r3
 800142a:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	2b14      	cmp	r3, #20
 8001430:	d102      	bne.n	8001438 <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d102      	bne.n	8001444 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2202      	movs	r2, #2
 8001442:	801a      	strh	r2, [r3, #0]
	return status;
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	21de      	movs	r1, #222	; 0xde
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f82b 	bl	80024c4 <VL53L1_RdWord>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	4313      	orrs	r3, r2
 8001476:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001478:	89bb      	ldrh	r3, [r7, #12]
 800147a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800147e:	b29b      	uxth	r3, r3
 8001480:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	461a      	mov	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f839 	bl	8000504 <__aeabi_ui2d>
 8001492:	a30b      	add	r3, pc, #44	; (adr r3, 80014c0 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f8ae 	bl	80005f8 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff faba 	bl	8000a1c <__aeabi_d2uiz>
 80014a8:	4602      	mov	r2, r0
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	216c      	movs	r1, #108	; 0x6c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 ff94 	bl	80023dc <VL53L1_WrDWord>
	return status;
 80014b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	33333333 	.word	0x33333333
 80014c4:	3ff13333 	.word	0x3ff13333

080014c8 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80014dc:	f107 020e 	add.w	r2, r7, #14
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	21e5      	movs	r1, #229	; 0xe5
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 ffb5 	bl	8002454 <VL53L1_RdByte>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80014f4:	7bba      	ldrb	r2, [r7, #14]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	701a      	strb	r2, [r3, #0]
	return status;
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	6039      	str	r1, [r7, #0]
 8001510:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2196      	movs	r1, #150	; 0x96
 800151e:	4618      	mov	r0, r3
 8001520:	f000 ffd0 	bl	80024c4 <VL53L1_RdWord>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4313      	orrs	r3, r2
 800152c:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800152e:	89ba      	ldrh	r2, [r7, #12]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	801a      	strh	r2, [r3, #0]
	return status;
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <VL53L1X_GetSignalRate>:
	*ambPerSp=(uint16_t) (200.0 * AmbientRate / SpNb);
	return status;
}

VL53L1X_ERROR VL53L1X_GetSignalRate(uint16_t dev, uint16_t *signal)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	2198      	movs	r1, #152	; 0x98
 8001558:	4618      	mov	r0, r3
 800155a:	f000 ffb3 	bl	80024c4 <VL53L1_RdWord>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	4313      	orrs	r3, r2
 8001566:	73fb      	strb	r3, [r7, #15]
		VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0, &tmp);
	*signal = tmp*8;
 8001568:	89bb      	ldrh	r3, [r7, #12]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	b29a      	uxth	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	801a      	strh	r2, [r3, #0]
	return status;
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <VL53L1X_GetSpadNb>:

VL53L1X_ERROR VL53L1X_GetSpadNb(uint16_t dev, uint16_t *spNb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	6039      	str	r1, [r7, #0]
 8001588:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 800158e:	f107 020c 	add.w	r2, r7, #12
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	218c      	movs	r1, #140	; 0x8c
 8001596:	4618      	mov	r0, r3
 8001598:	f000 ff94 	bl	80024c4 <VL53L1_RdWord>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	73fb      	strb	r3, [r7, #15]
			      VL53L1_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0, &tmp);
	*spNb = tmp >> 8;
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	801a      	strh	r2, [r3, #0]
	return status;
 80015b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <VL53L1X_GetAmbientRate>:

VL53L1X_ERROR VL53L1X_GetAmbientRate(uint16_t dev, uint16_t *ambRate)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev, RESULT__AMBIENT_COUNT_RATE_MCPS_SD, &tmp);
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	2190      	movs	r1, #144	; 0x90
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ff75 	bl	80024c4 <VL53L1_RdWord>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	73fb      	strb	r3, [r7, #15]
	*ambRate = tmp*8;
 80015e4:	89bb      	ldrh	r3, [r7, #12]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	801a      	strh	r2, [r3, #0]
	return status;
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <VL53L1X_GetRangeStatus>:

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	22ff      	movs	r2, #255	; 0xff
 8001610:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001612:	f107 020e 	add.w	r2, r7, #14
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2189      	movs	r1, #137	; 0x89
 800161a:	4618      	mov	r0, r3
 800161c:	f000 ff1a 	bl	8002454 <VL53L1_RdByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	4313      	orrs	r3, r2
 8001628:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	b2db      	uxtb	r3, r3
 8001632:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	2b17      	cmp	r3, #23
 8001638:	d805      	bhi.n	8001646 <VL53L1X_GetRangeStatus+0x4a>
		*rangeStatus = status_rtn[RgSt];
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <VL53L1X_GetRangeStatus+0x58>)
 8001640:	5c9a      	ldrb	r2, [r3, r2]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	701a      	strb	r2, [r3, #0]
	return status;
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	080060e8 	.word	0x080060e8

08001658 <interpolate>:
void waitForIdleTimer(){
	while((TIM3->CNT+1)>=TIM3->ARR);
}


uint16_t interpolate(float ratio,uint16_t min,uint16_t max){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	803b      	strh	r3, [r7, #0]

	return min+(((float)(max-min))*ratio);
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	883a      	ldrh	r2, [r7, #0]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	ee17 3a90 	vmov	r3, s15
 8001698:	b29b      	uxth	r3, r3

}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08d      	sub	sp, #52	; 0x34
 80016ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ae:	f000 ff75 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b2:	f000 f9a9 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b6:	f000 fb61 	bl	8001d7c <MX_GPIO_Init>
  MX_TIM4_Init();
 80016ba:	f000 fa8b 	bl	8001bd4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016be:	f000 fb01 	bl	8001cc4 <MX_TIM5_Init>
  MX_TIM3_Init();
 80016c2:	f000 fa39 	bl	8001b38 <MX_TIM3_Init>
  MX_I2C1_Init();
 80016c6:	f000 fa09 	bl	8001adc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  float position=0;
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t dir=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  volatile float increment=0.01;
 80016d6:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <main+0x260>)
 80016d8:	61bb      	str	r3, [r7, #24]
  uint16_t potMax=TIM4->ARR*0.26;
 80016da:	4b8c      	ldr	r3, [pc, #560]	; (800190c <main+0x264>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff10 	bl	8000504 <__aeabi_ui2d>
 80016e4:	a384      	add	r3, pc, #528	; (adr r3, 80018f8 <main+0x250>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff85 	bl	80005f8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff f991 	bl	8000a1c <__aeabi_d2uiz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	843b      	strh	r3, [r7, #32]
  uint16_t potMin=TIM4->ARR*0.05;
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <main+0x264>)
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fefe 	bl	8000504 <__aeabi_ui2d>
 8001708:	a37d      	add	r3, pc, #500	; (adr r3, 8001900 <main+0x258>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff73 	bl	80005f8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f97f 	bl	8000a1c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	83fb      	strh	r3, [r7, #30]
  volatile uint8_t allowTurn=0;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]


  //for laser
  uint8_t byteData, sensorState=0;
 8001726:	2300      	movs	r3, #0
 8001728:	757b      	strb	r3, [r7, #21]
  uint16_t wordData;
  uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
 800172a:	2301      	movs	r3, #1
 800172c:	777b      	strb	r3, [r7, #29]
  uint16_t AmbientRate;
  uint16_t SpadNum;
  uint8_t RangeStatus;
  uint8_t dataReady;

  HAL_TIM_Base_Init(&htim3);
 800172e:	4878      	ldr	r0, [pc, #480]	; (8001910 <main+0x268>)
 8001730:	f002 fe68 	bl	8004404 <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Init(&htim4);
 8001734:	4877      	ldr	r0, [pc, #476]	; (8001914 <main+0x26c>)
 8001736:	f002 ff0f 	bl	8004558 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start(&htim3);
 800173a:	4875      	ldr	r0, [pc, #468]	; (8001910 <main+0x268>)
 800173c:	f002 feb2 	bl	80044a4 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001740:	210c      	movs	r1, #12
 8001742:	4874      	ldr	r0, [pc, #464]	; (8001914 <main+0x26c>)
 8001744:	f002 ff58 	bl	80045f8 <HAL_TIM_PWM_Start>



  HAL_I2C_Init(&hi2c1);
 8001748:	4873      	ldr	r0, [pc, #460]	; (8001918 <main+0x270>)
 800174a:	f001 fa41 	bl	8002bd0 <HAL_I2C_Init>


  pLaserI2Chandle=&hi2c1;
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <main+0x274>)
 8001750:	4a71      	ldr	r2, [pc, #452]	; (8001918 <main+0x270>)
 8001752:	601a      	str	r2, [r3, #0]
  volatile uint8_t bootState=0;
 8001754:	2300      	movs	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
  VL53L1X_BootState(dev, bootState);
 8001758:	4b71      	ldr	r3, [pc, #452]	; (8001920 <main+0x278>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff feb0 	bl	80014c8 <VL53L1X_BootState>

  status = VL53L1_RdByte(dev, 0x010F, &byteData);
 8001768:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <main+0x278>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	f107 0216 	add.w	r2, r7, #22
 8001770:	f240 110f 	movw	r1, #271	; 0x10f
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fe6d 	bl	8002454 <VL53L1_RdByte>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b69      	ldr	r3, [pc, #420]	; (8001924 <main+0x27c>)
 8001780:	601a      	str	r2, [r3, #0]

    status = VL53L1_RdByte(dev, 0x0110, &byteData);
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <main+0x278>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	f107 0216 	add.w	r2, r7, #22
 800178a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fe60 	bl	8002454 <VL53L1_RdByte>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <main+0x27c>)
 800179a:	601a      	str	r2, [r3, #0]
    status = VL53L1_RdWord(dev, 0x010F, &wordData);
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <main+0x278>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	f107 0212 	add.w	r2, r7, #18
 80017a4:	f240 110f 	movw	r1, #271	; 0x10f
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fe8b 	bl	80024c4 <VL53L1_RdWord>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <main+0x27c>)
 80017b4:	601a      	str	r2, [r3, #0]
    while(sensorState==0){
 80017b6:	e00e      	b.n	80017d6 <main+0x12e>
  		status = VL53L1X_BootState(dev, &sensorState);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <main+0x278>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f107 0215 	add.w	r2, r7, #21
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe80 	bl	80014c8 <VL53L1X_BootState>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <main+0x27c>)
 80017ce:	601a      	str	r2, [r3, #0]
  	HAL_Delay(2);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f000 ff55 	bl	8002680 <HAL_Delay>
    while(sensorState==0){
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ed      	beq.n	80017b8 <main+0x110>
    }


  status = VL53L1X_SensorInit(dev);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <main+0x278>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fabd 	bl	8000d60 <VL53L1X_SensorInit>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <main+0x27c>)
 80017ec:	601a      	str	r2, [r3, #0]
  status = VL53L1X_SetDistanceMode(dev, 2); /* 1=short, 2=long */
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <main+0x278>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fd63 	bl	80012c0 <VL53L1X_SetDistanceMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <main+0x27c>)
 8001800:	601a      	str	r2, [r3, #0]
  status = VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <main+0x278>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	2164      	movs	r1, #100	; 0x64
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbbe 	bl	8000f8a <VL53L1X_SetTimingBudgetInMs>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <main+0x27c>)
 8001814:	601a      	str	r2, [r3, #0]
  status = VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <main+0x278>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2164      	movs	r1, #100	; 0x64
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe17 	bl	8001450 <VL53L1X_SetInterMeasurementInMs>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <main+0x27c>)
 8001828:	601a      	str	r2, [r3, #0]

  status = VL53L1X_StartRanging(dev);
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <main+0x278>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb44 	bl	8000ebc <VL53L1X_StartRanging>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <main+0x27c>)
 800183a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //startIdleTimer(idleTime);

	  switch (allowTurn) {
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10d      	bne.n	8001860 <main+0x1b8>
	  case 0:
		  if(position!=0){
 8001844:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d050      	beq.n	80018f4 <main+0x24c>
			  position=0;
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
			  TIM4->CCR4=potMin;
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <main+0x264>)
 800185a:	8bfb      	ldrh	r3, [r7, #30]
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
		  }
		  break;
 800185e:	e049      	b.n	80018f4 <main+0x24c>
	  default:

		  switch (dir) {
 8001860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <main+0x1c6>
 8001868:	2b01      	cmp	r3, #1
 800186a:	d01d      	beq.n	80018a8 <main+0x200>
 800186c:	e035      	b.n	80018da <main+0x232>
		  case 0:
			  if(position>=1-increment){
 800186e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800187e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	db06      	blt.n	8001896 <main+0x1ee>
				  dir=1;
 8001888:	2301      	movs	r3, #1
 800188a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  position=1;
 800188e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  else{
				  position+=increment;
			  }

			  break;
 8001894:	e021      	b.n	80018da <main+0x232>
				  position+=increment;
 8001896:	edd7 7a06 	vldr	s15, [r7, #24]
 800189a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			  break;
 80018a6:	e018      	b.n	80018da <main+0x232>
		  case 1:
			  if(position<=increment){
 80018a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d806      	bhi.n	80018c8 <main+0x220>
				  dir=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  position=0;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  else{
				  position-=increment;
			  }

			  break;
 80018c6:	e007      	b.n	80018d8 <main+0x230>
				  position-=increment;
 80018c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			  break;
 80018d8:	bf00      	nop
		  }

		  TIM4->CCR4=interpolate(position,potMin,potMax);
 80018da:	8c3a      	ldrh	r2, [r7, #32]
 80018dc:	8bfb      	ldrh	r3, [r7, #30]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80018e6:	f7ff feb7 	bl	8001658 <interpolate>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <main+0x264>)
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40

		  break;
 80018f2:	e000      	b.n	80018f6 <main+0x24e>
		  break;
 80018f4:	bf00      	nop
	  }
	  while (dataReady == 0){
 80018f6:	e026      	b.n	8001946 <main+0x29e>
 80018f8:	0a3d70a4 	.word	0x0a3d70a4
 80018fc:	3fd0a3d7 	.word	0x3fd0a3d7
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fa99999 	.word	0x3fa99999
 8001908:	3c23d70a 	.word	0x3c23d70a
 800190c:	40000800 	.word	0x40000800
 8001910:	200000e4 	.word	0x200000e4
 8001914:	2000012c 	.word	0x2000012c
 8001918:	20000090 	.word	0x20000090
 800191c:	200001c0 	.word	0x200001c0
 8001920:	20000000 	.word	0x20000000
 8001924:	200001bc 	.word	0x200001bc
	  		  status = VL53L1X_CheckForDataReady(dev, &dataReady);
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <main+0x354>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f107 0208 	add.w	r2, r7, #8
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff faf2 	bl	8000f1c <VL53L1X_CheckForDataReady>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <main+0x358>)
 800193e:	601a      	str	r2, [r3, #0]
	  		  HAL_Delay(2);
 8001940:	2002      	movs	r0, #2
 8001942:	f000 fe9d 	bl	8002680 <HAL_Delay>
	  while (dataReady == 0){
 8001946:	7a3b      	ldrb	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ed      	beq.n	8001928 <main+0x280>
	  	  }
	  	  dataReady = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	723b      	strb	r3, [r7, #8]
	  	  status = VL53L1X_GetRangeStatus(dev, &RangeStatus);
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <main+0x354>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	f107 0209 	add.w	r2, r7, #9
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe4e 	bl	80015fc <VL53L1X_GetRangeStatus>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <main+0x358>)
 8001966:	601a      	str	r2, [r3, #0]
	  	  status = VL53L1X_GetDistance(dev, &Distance);
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <main+0x354>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	f107 0210 	add.w	r2, r7, #16
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fdc7 	bl	8001506 <VL53L1X_GetDistance>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <main+0x358>)
 800197e:	601a      	str	r2, [r3, #0]
	  	  status = VL53L1X_GetSignalRate(dev, &SignalRate);
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <main+0x354>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f107 020e 	add.w	r2, r7, #14
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fdd8 	bl	8001540 <VL53L1X_GetSignalRate>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <main+0x358>)
 8001996:	601a      	str	r2, [r3, #0]
	  	  status = VL53L1X_GetAmbientRate(dev, &AmbientRate);
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <main+0x354>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	f107 020c 	add.w	r2, r7, #12
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fe0a 	bl	80015bc <VL53L1X_GetAmbientRate>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <main+0x358>)
 80019ae:	601a      	str	r2, [r3, #0]
	  	  status = VL53L1X_GetSpadNb(dev, &SpadNum);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <main+0x354>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	f107 020a 	add.w	r2, r7, #10
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fddf 	bl	800157e <VL53L1X_GetSpadNb>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <main+0x358>)
 80019c6:	601a      	str	r2, [r3, #0]
	  	  status = VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <main+0x354>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa33 	bl	8000e38 <VL53L1X_ClearInterrupt>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <main+0x358>)
 80019d8:	601a      	str	r2, [r3, #0]
	  	  printf("%u, %u, %u, %u, %u\n", RangeStatus, Distance, SignalRate, AmbientRate,SpadNum);
 80019da:	7a7b      	ldrb	r3, [r7, #9]
 80019dc:	4619      	mov	r1, r3
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	4618      	mov	r0, r3
 80019e2:	89fb      	ldrh	r3, [r7, #14]
 80019e4:	461c      	mov	r4, r3
 80019e6:	89bb      	ldrh	r3, [r7, #12]
 80019e8:	897a      	ldrh	r2, [r7, #10]
 80019ea:	9201      	str	r2, [sp, #4]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4623      	mov	r3, r4
 80019f0:	4602      	mov	r2, r0
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <main+0x35c>)
 80019f4:	f003 fba6 	bl	8005144 <iprintf>
	  switch (allowTurn) {
 80019f8:	e720      	b.n	800183c <main+0x194>
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000
 8001a00:	200001bc 	.word	0x200001bc
 8001a04:	08006078 	.word	0x08006078

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fb8c 	bl	8005134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a86:	2304      	movs	r3, #4
 8001a88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 f832 	bl	8003afc <HAL_RCC_OscConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a9e:	f000 f9eb 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fa95 	bl	8003fec <HAL_RCC_ClockConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ac8:	f000 f9d6 	bl	8001e78 <Error_Handler>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3750      	adds	r7, #80	; 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <MX_I2C1_Init+0x54>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_I2C1_Init+0x58>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 164;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001af4:	22a4      	movs	r2, #164	; 0xa4
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_I2C1_Init+0x50>)
 8001b1a:	f001 f859 	bl	8002bd0 <HAL_I2C_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b24:	f000 f9a8 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000090 	.word	0x20000090
 8001b30:	40005400 	.word	0x40005400
 8001b34:	000186a0 	.word	0x000186a0

08001b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <MX_TIM3_Init+0x98>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b5c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b7e:	f002 fc41 	bl	8004404 <HAL_TIM_Base_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b88:	f000 f976 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001b9a:	f002 fe9f 	bl	80048dc <HAL_TIM_ConfigClockSource>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ba4:	f000 f968 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_TIM3_Init+0x94>)
 8001bb6:	f003 fa25 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bc0:	f000 f95a 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000e4 	.word	0x200000e4
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <MX_TIM4_Init+0xec>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c2a:	4824      	ldr	r0, [pc, #144]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c2c:	f002 fbea 	bl	8004404 <HAL_TIM_Base_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c36:	f000 f91f 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	4619      	mov	r1, r3
 8001c46:	481d      	ldr	r0, [pc, #116]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c48:	f002 fe48 	bl	80048dc <HAL_TIM_ConfigClockSource>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c52:	f000 f911 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c56:	4819      	ldr	r0, [pc, #100]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c58:	f002 fc7e 	bl	8004558 <HAL_TIM_PWM_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c62:	f000 f909 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c66:	2320      	movs	r3, #32
 8001c68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	4619      	mov	r1, r3
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c76:	f003 f9c5 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c80:	f000 f8fa 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c84:	2360      	movs	r3, #96	; 0x60
 8001c86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	220c      	movs	r2, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001c9e:	f002 fd5b 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ca8:	f000 f8e6 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM4_Init+0xe8>)
 8001cae:	f000 f9b3 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	; 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000012c 	.word	0x2000012c
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	615a      	str	r2, [r3, #20]
 8001ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <MX_TIM5_Init+0xb0>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 840000;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <MX_TIM5_Init+0xb4>)
 8001cfc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d0a:	4819      	ldr	r0, [pc, #100]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d0c:	f002 fc24 	bl	8004558 <HAL_TIM_PWM_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001d16:	f000 f8af 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	4619      	mov	r1, r3
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d2a:	f003 f96b 	bl	8005004 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001d34:	f000 f8a0 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d38:	2360      	movs	r3, #96	; 0x60
 8001d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d52:	f002 fd01 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d5c:	f000 f88c 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <MX_TIM5_Init+0xac>)
 8001d62:	f000 f959 	bl	8002018 <HAL_TIM_MspPostInit>

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000174 	.word	0x20000174
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	000cd140 	.word	0x000cd140

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_GPIO_Init+0xf0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2120      	movs	r1, #32
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001e08:	f000 fec8 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <MX_GPIO_Init+0xf8>)
 8001e24:	f000 fd36 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e28:	230c      	movs	r3, #12
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	480b      	ldr	r0, [pc, #44]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001e44:	f000 fd26 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001e60:	f000 fd18 	bl	8002894 <HAL_GPIO_Init>

}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020800 	.word	0x40020800

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <Error_Handler+0x8>
	...

08001e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec2:	2007      	movs	r0, #7
 8001ec4:	f000 fcb2 	bl	800282c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_I2C_MspInit+0x84>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d12b      	bne.n	8001f4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f12:	23c0      	movs	r3, #192	; 0xc0
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f16:	2312      	movs	r3, #18
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f22:	2304      	movs	r3, #4
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <HAL_I2C_MspInit+0x8c>)
 8001f2e:	f000 fcb1 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_I2C_MspInit+0x88>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020400 	.word	0x40020400

08001f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_TIM_Base_MspInit+0x64>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f92:	e012      	b.n	8001fba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10d      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_TIM_Base_MspInit+0x68>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10d      	bne.n	8002002 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_TIM_PWM_MspInit+0x40>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <HAL_TIM_MspPostInit+0xb0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d11f      	bne.n	800207a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002068:	2302      	movs	r3, #2
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4817      	ldr	r0, [pc, #92]	; (80020d0 <HAL_TIM_MspPostInit+0xb8>)
 8002074:	f000 fc0e 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002078:	e022      	b.n	80020c0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_TIM_MspPostInit+0xbc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11d      	bne.n	80020c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_TIM_MspPostInit+0xb4>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020a0:	2302      	movs	r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020b0:	2302      	movs	r3, #2
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <HAL_TIM_MspPostInit+0xc0>)
 80020bc:	f000 fbea 	bl	8002894 <HAL_GPIO_Init>
}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40020000 	.word	0x40020000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 fa8a 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
	}

return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
	}
	return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
	return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f002 ff50 	bl	80050e0 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20018000 	.word	0x20018000
 800226c:	00000400 	.word	0x00000400
 8002270:	200001c4 	.word	0x200001c4
 8002274:	200002e0 	.word	0x200002e0

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <_I2CWrite>:

uint8_t _I2CBuffer[256];



int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	4603      	mov	r3, r0
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	330a      	adds	r3, #10
 80022ae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(pLaserI2Chandle, Dev, pdata, count, i2c_time_out);
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <_I2CWrite+0x38>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	89f9      	ldrh	r1, [r7, #14]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	f000 fdc9 	bl	8002e58 <HAL_I2C_Master_Transmit>
 80022c6:	4603      	mov	r3, r0
 80022c8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200001c0 	.word	0x200001c0

080022d8 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4603      	mov	r3, r0
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	330a      	adds	r3, #10
 80022ea:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(pLaserI2Chandle, Dev|1, pdata, count, i2c_time_out);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <_I2CRead+0x40>)
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b299      	uxth	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f000 fea6 	bl	8003054 <HAL_I2C_Master_Receive>
 8002308:	4603      	mov	r3, r0
 800230a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800230c:	693b      	ldr	r3, [r7, #16]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200001c0 	.word	0x200001c0

0800231c <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
 8002326:	460b      	mov	r3, r1
 8002328:	80bb      	strh	r3, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <VL53L1_WrByte+0x54>)
 800233c:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <VL53L1_WrByte+0x54>)
 8002344:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <VL53L1_WrByte+0x54>)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	2203      	movs	r2, #3
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <VL53L1_WrByte+0x54>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ffa2 	bl	800229c <_I2CWrite>
 8002358:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002360:	23f3      	movs	r3, #243	; 0xf3
 8002362:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001c8 	.word	0x200001c8

08002374 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
 800237e:	460b      	mov	r3, r1
 8002380:	80bb      	strh	r3, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	807b      	strh	r3, [r7, #2]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800238a:	88bb      	ldrh	r3, [r7, #4]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <VL53L1_WrWord+0x64>)
 8002394:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002396:	88bb      	ldrh	r3, [r7, #4]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <VL53L1_WrWord+0x64>)
 800239c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <VL53L1_WrWord+0x64>)
 80023a8:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <VL53L1_WrWord+0x64>)
 80023b0:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2204      	movs	r2, #4
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <VL53L1_WrWord+0x64>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff6f 	bl	800229c <_I2CWrite>
 80023be:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <VL53L1_WrWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80023c6:	23f3      	movs	r3, #243	; 0xf3
 80023c8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200001c8 	.word	0x200001c8

080023dc <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	603a      	str	r2, [r7, #0]
 80023e6:	80fb      	strh	r3, [r7, #6]
 80023e8:	460b      	mov	r3, r1
 80023ea:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <VL53L1_WrDWord+0x74>)
 80023fa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80023fc:	88bb      	ldrh	r3, [r7, #4]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <VL53L1_WrDWord+0x74>)
 8002402:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	0e1b      	lsrs	r3, r3, #24
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <VL53L1_WrDWord+0x74>)
 800240c:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <VL53L1_WrDWord+0x74>)
 8002416:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <VL53L1_WrDWord+0x74>)
 8002420:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <VL53L1_WrDWord+0x74>)
 8002428:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2206      	movs	r2, #6
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <VL53L1_WrDWord+0x74>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff33 	bl	800229c <_I2CWrite>
 8002436:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <VL53L1_WrDWord+0x66>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800243e:	23f3      	movs	r3, #243	; 0xf3
 8002440:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200001c8 	.word	0x200001c8

08002454 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	603a      	str	r2, [r7, #0]
 800245e:	80fb      	strh	r3, [r7, #6]
 8002460:	460b      	mov	r3, r1
 8002462:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <VL53L1_RdByte+0x6c>)
 8002472:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8002474:	88bb      	ldrh	r3, [r7, #4]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <VL53L1_RdByte+0x6c>)
 800247a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	2202      	movs	r2, #2
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <VL53L1_RdByte+0x6c>)
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff0a 	bl	800229c <_I2CWrite>
 8002488:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002490:	23f3      	movs	r3, #243	; 0xf3
 8002492:	73fb      	strb	r3, [r7, #15]
        goto done;
 8002494:	e00d      	b.n	80024b2 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2201      	movs	r2, #1
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff1b 	bl	80022d8 <_I2CRead>
 80024a2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80024aa:	23f3      	movs	r3, #243	; 0xf3
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e000      	b.n	80024b2 <VL53L1_RdByte+0x5e>
    }
done:
 80024b0:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200001c8 	.word	0x200001c8

080024c4 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	603a      	str	r2, [r7, #0]
 80024ce:	80fb      	strh	r3, [r7, #6]
 80024d0:	460b      	mov	r3, r1
 80024d2:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80024d8:	88bb      	ldrh	r3, [r7, #4]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <VL53L1_RdWord+0x80>)
 80024e2:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <VL53L1_RdWord+0x80>)
 80024ea:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	2202      	movs	r2, #2
 80024f0:	4914      	ldr	r1, [pc, #80]	; (8002544 <VL53L1_RdWord+0x80>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fed2 	bl	800229c <_I2CWrite>
 80024f8:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002500:	23f3      	movs	r3, #243	; 0xf3
 8002502:	73fb      	strb	r3, [r7, #15]
        goto done;
 8002504:	e018      	b.n	8002538 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2202      	movs	r2, #2
 800250a:	490e      	ldr	r1, [pc, #56]	; (8002544 <VL53L1_RdWord+0x80>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fee3 	bl	80022d8 <_I2CRead>
 8002512:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800251a:	23f3      	movs	r3, #243	; 0xf3
 800251c:	73fb      	strb	r3, [r7, #15]
        goto done;
 800251e:	e00b      	b.n	8002538 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <VL53L1_RdWord+0x80>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <VL53L1_RdWord+0x80>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4413      	add	r3, r2
 8002532:	b29a      	uxth	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200001c8 	.word	0x200001c8

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002572:	f7ff fe81 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f002 fdb9 	bl	80050ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7ff f895 	bl	80016a8 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002580:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800258c:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8002590:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002594:	200002dc 	.word	0x200002dc

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_Init+0x40>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_Init+0x40>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_Init+0x40>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f931 	bl	800282c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f808 	bl	80025e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7ff fc58 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x54>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x58>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f93b 	bl	800287a <HAL_SYSTICK_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00e      	b.n	800262c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d80a      	bhi.n	800262a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f000 f911 	bl	8002842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <HAL_InitTick+0x5c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000004 	.word	0x20000004
 8002638:	2000000c 	.word	0x2000000c
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c
 8002664:	200002c8 	.word	0x200002c8

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200002c8 	.word	0x200002c8

08002680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff ffee 	bl	8002668 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d005      	beq.n	80026a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_Delay+0x44>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a6:	bf00      	nop
 80026a8:	f7ff ffde 	bl	8002668 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d8f7      	bhi.n	80026a8 <HAL_Delay+0x28>
  {
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c

080026c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <__NVIC_GetPriorityGrouping+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 0307 	and.w	r3, r3, #7
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f8:	d301      	bcc.n	80027fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <SysTick_Config+0x40>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002806:	210f      	movs	r1, #15
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f7ff ff8e 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <SysTick_Config+0x40>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SysTick_Config+0x40>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff47 	bl	80026c8 <__NVIC_SetPriorityGrouping>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002854:	f7ff ff5c 	bl	8002710 <__NVIC_GetPriorityGrouping>
 8002858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff ff8e 	bl	8002780 <NVIC_EncodePriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff5d 	bl	800272c <__NVIC_SetPriority>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffb0 	bl	80027e8 <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e159      	b.n	8002b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8148 	bne.w	8002b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a2 	beq.w	8002b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_GPIO_Init+0x2e8>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a49      	ldr	r2, [pc, #292]	; (8002b84 <HAL_GPIO_Init+0x2f0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x202>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_GPIO_Init+0x2f4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x1fe>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <HAL_GPIO_Init+0x2f8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x1fa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a46      	ldr	r2, [pc, #280]	; (8002b90 <HAL_GPIO_Init+0x2fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x1f6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <HAL_GPIO_Init+0x300>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x1f2>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x204>
 8002a96:	2300      	movs	r3, #0
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa8:	4935      	ldr	r1, [pc, #212]	; (8002b80 <HAL_GPIO_Init+0x2ec>)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_GPIO_Init+0x304>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	f67f aea2 	bls.w	80028b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb8:	e003      	b.n	8002bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	041a      	lsls	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e12b      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff f96c 	bl	8001ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c34:	f001 fbd2 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a81      	ldr	r2, [pc, #516]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d807      	bhi.n	8002c54 <HAL_I2C_Init+0x84>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_I2C_Init+0x278>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e006      	b.n	8002c62 <HAL_I2C_Init+0x92>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_I2C_Init+0x27c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	bf94      	ite	ls
 8002c5c:	2301      	movls	r3, #1
 8002c5e:	2300      	movhi	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e7      	b.n	8002e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <HAL_I2C_Init+0x280>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0c9b      	lsrs	r3, r3, #18
 8002c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_I2C_Init+0xd4>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	e009      	b.n	8002cb8 <HAL_I2C_Init+0xe8>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	4a69      	ldr	r2, [pc, #420]	; (8002e54 <HAL_I2C_Init+0x284>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	495c      	ldr	r1, [pc, #368]	; (8002e44 <HAL_I2C_Init+0x274>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d819      	bhi.n	8002d0c <HAL_I2C_Init+0x13c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e59      	subs	r1, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cec:	400b      	ands	r3, r1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_I2C_Init+0x138>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e59      	subs	r1, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d06:	e051      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	e04f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_I2C_Init+0x168>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e012      	b.n	8002d5e <HAL_I2C_Init+0x18e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Init+0x196>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e022      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_I2C_Init+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e58      	subs	r0, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	440b      	add	r3, r1
 8002d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Init+0x1dc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	0099      	lsls	r1, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6911      	ldr	r1, [r2, #16]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68d2      	ldr	r2, [r2, #12]
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	000186a0 	.word	0x000186a0
 8002e48:	001e847f 	.word	0x001e847f
 8002e4c:	003d08ff 	.word	0x003d08ff
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	460b      	mov	r3, r1
 8002e66:	817b      	strh	r3, [r7, #10]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff fbfc 	bl	8002668 <HAL_GetTick>
 8002e70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	f040 80e0 	bne.w	8003040 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2319      	movs	r3, #25
 8002e86:	2201      	movs	r2, #1
 8002e88:	4970      	ldr	r1, [pc, #448]	; (800304c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fc58 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0d3      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2C_Master_Transmit+0x50>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0cc      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d007      	beq.n	8002ece <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2221      	movs	r2, #33	; 0x21
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	893a      	ldrh	r2, [r7, #8]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fac2 	bl	80034a0 <I2C_MasterRequestWrite>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e08d      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f3c:	e066      	b.n	800300c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fcd2 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d107      	bne.n	8002f66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06b      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_I2C_Master_Transmit+0x188>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	6a39      	ldr	r1, [r7, #32]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fcc2 	bl	800396e <I2C_WaitOnBTFFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d107      	bne.n	8003008 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e01a      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d194      	bne.n	8002f3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	00100002 	.word	0x00100002
 8003050:	ffff0000 	.word	0xffff0000

08003054 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	461a      	mov	r2, r3
 8003060:	460b      	mov	r3, r1
 8003062:	817b      	strh	r3, [r7, #10]
 8003064:	4613      	mov	r3, r2
 8003066:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff fafe 	bl	8002668 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	f040 820b 	bne.w	8003492 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2319      	movs	r3, #25
 8003082:	2201      	movs	r2, #1
 8003084:	497c      	ldr	r1, [pc, #496]	; (8003278 <HAL_I2C_Master_Receive+0x224>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fb5a 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
 8003094:	e1fe      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_I2C_Master_Receive+0x50>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e1f7      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d007      	beq.n	80030ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2222      	movs	r2, #34	; 0x22
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2210      	movs	r2, #16
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	893a      	ldrh	r2, [r7, #8]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_I2C_Master_Receive+0x228>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa46 	bl	80035a4 <I2C_MasterRequestRead>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1b8      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d113      	bne.n	8003152 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e18c      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b01      	cmp	r3, #1
 8003158:	d11b      	bne.n	8003192 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e16c      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b02      	cmp	r3, #2
 8003198:	d11b      	bne.n	80031d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	e14c      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031f8:	e138      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	2b03      	cmp	r3, #3
 8003200:	f200 80f1 	bhi.w	80033e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b01      	cmp	r3, #1
 800320a:	d123      	bne.n	8003254 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fbed 	bl	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e139      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003252:	e10b      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b02      	cmp	r3, #2
 800325a:	d14e      	bne.n	80032fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	2200      	movs	r2, #0
 8003264:	4906      	ldr	r1, [pc, #24]	; (8003280 <HAL_I2C_Master_Receive+0x22c>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fa6a 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e10e      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000
 8003280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f8:	e0b8      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2200      	movs	r2, #0
 8003302:	4966      	ldr	r1, [pc, #408]	; (800349c <HAL_I2C_Master_Receive+0x448>)
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fa1b 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0bf      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	2200      	movs	r2, #0
 800335e:	494f      	ldr	r1, [pc, #316]	; (800349c <HAL_I2C_Master_Receive+0x448>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f9ed 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e091      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e4:	e042      	b.n	800346c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fb00 	bl	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e04c      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d118      	bne.n	800346c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f aec2 	bne.w	80031fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	00010004 	.word	0x00010004

080034a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d006      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d003      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e00b      	b.n	80034f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f91d 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e035      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e01b      	b.n	800357c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030f 	orn	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <I2C_MasterRequestWrite+0xfc>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f943 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e010      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <I2C_MasterRequestWrite+0x100>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f933 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010008 	.word	0x00010008
 80035a0:	00010002 	.word	0x00010002

080035a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d006      	beq.n	80035de <I2C_MasterRequestRead+0x3a>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d003      	beq.n	80035de <I2C_MasterRequestRead+0x3a>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035dc:	d108      	bne.n	80035f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e00b      	b.n	8003608 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	2b11      	cmp	r3, #17
 80035f6:	d107      	bne.n	8003608 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f893 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	d103      	bne.n	8003638 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e079      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003644:	d108      	bne.n	8003658 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e05f      	b.n	8003718 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	11db      	asrs	r3, r3, #7
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0306 	and.w	r3, r3, #6
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f063 030f 	orn	r3, r3, #15
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4930      	ldr	r1, [pc, #192]	; (8003738 <I2C_MasterRequestRead+0x194>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8b9 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e054      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4929      	ldr	r1, [pc, #164]	; (800373c <I2C_MasterRequestRead+0x198>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f8a9 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e044      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f831 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f2:	d103      	bne.n	80036fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e017      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	11db      	asrs	r3, r3, #7
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f063 030e 	orn	r3, r3, #14
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4907      	ldr	r1, [pc, #28]	; (800373c <I2C_MasterRequestRead+0x198>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f865 	bl	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	00010008 	.word	0x00010008
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003750:	e025      	b.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d021      	beq.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe ff85 	bl	8002668 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e023      	b.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10d      	bne.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	e00c      	b.n	80037de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d0b6      	beq.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fc:	e051      	b.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d123      	bne.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e046      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d021      	beq.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe ff03 	bl	8002668 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d116      	bne.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10c      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e00b      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d18d      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	e02d      	b.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8ce 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e02d      	b.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fea9 	bl	8002668 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e007      	b.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d1ca      	bne.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800397a:	e02d      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f88d 	bl	8003a9c <I2C_IsAcknowledgeFailed>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e02d      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d021      	beq.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe fe68 	bl	8002668 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d1ca      	bne.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039fc:	e042      	b.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d119      	bne.n	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0210 	mvn.w	r2, #16
 8003a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e029      	b.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a40:	f7fe fe12 	bl	8002668 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d302      	bcc.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d116      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e007      	b.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d1b5      	bne.n	80039fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d11b      	bne.n	8003aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e267      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d075      	beq.n	8003c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1a:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d00c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b85      	ldr	r3, [pc, #532]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d112      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b32:	4b82      	ldr	r3, [pc, #520]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05b      	beq.n	8003c04 <HAL_RCC_OscConfig+0x108>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d157      	bne.n	8003c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e242      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCC_OscConfig+0x74>
 8003b62:	4b76      	ldr	r3, [pc, #472]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a75      	ldr	r2, [pc, #468]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x98>
 8003b7a:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6f      	ldr	r2, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b94:	4b69      	ldr	r3, [pc, #420]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a68      	ldr	r2, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b66      	ldr	r3, [pc, #408]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fd58 	bl	8002668 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fd54 	bl	8002668 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e207      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xc0>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fd44 	bl	8002668 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe fd40 	bl	8002668 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1f3      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0xe8>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2a:	4b44      	ldr	r3, [pc, #272]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c7      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fe fcf9 	bl	8002668 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fe fcf5 	bl	8002668 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a8      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4925      	ldr	r1, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fcd8 	bl	8002668 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fcd4 	bl	8002668 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e187      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d036      	beq.n	8003d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fcb8 	bl	8002668 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe fcb4 	bl	8002668 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e167      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x200>
 8003d1a:	e01b      	b.n	8003d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d22:	f7fe fca1 	bl	8002668 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	e00e      	b.n	8003d48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fc9d 	bl	8002668 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d907      	bls.n	8003d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e150      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	42470000 	.word	0x42470000
 8003d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ea      	bne.n	8003d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8097 	beq.w	8003e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	4b7d      	ldr	r3, [pc, #500]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a7c      	ldr	r2, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b77      	ldr	r3, [pc, #476]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b74      	ldr	r3, [pc, #464]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a73      	ldr	r2, [pc, #460]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fc5d 	bl	8002668 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fe fc59 	bl	8002668 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e10c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2ea>
 8003dd8:	4b64      	ldr	r3, [pc, #400]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x30c>
 8003dee:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003e08:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a57      	ldr	r2, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a54      	ldr	r2, [pc, #336]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe fc1e 	bl	8002668 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fe fc1a 	bl	8002668 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0cb      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCC_OscConfig+0x334>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e54:	f7fe fc08 	bl	8002668 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fc04 	bl	8002668 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0b5      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e72:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ee      	bne.n	8003e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a1 	beq.w	8003fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d05c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d141      	bne.n	8003f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fbd8 	bl	8002668 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe fbd4 	bl	8002668 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e087      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	491b      	ldr	r1, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fbad 	bl	8002668 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fe fba9 	bl	8002668 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e05c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x416>
 8003f30:	e054      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe fb96 	bl	8002668 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fe fb92 	bl	8002668 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e045      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x444>
 8003f5e:	e03d      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e038      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4ec>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d121      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0cc      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d90c      	bls.n	8004028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d119      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e067      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4934      	ldr	r1, [pc, #208]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe fac4 	bl	8002668 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe fac0 	bl	8002668 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e04f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fa24 	bl	80025e0 <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08006100 	.word	0x08006100
 80041b0:	20000004 	.word	0x20000004
 80041b4:	20000008 	.word	0x20000008

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b094      	sub	sp, #80	; 0x50
 80041be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	2300      	movs	r3, #0
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	2300      	movs	r3, #0
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d0:	4b79      	ldr	r3, [pc, #484]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d00d      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x40>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	f200 80e1 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x34>
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ea:	e0db      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041f0:	e0db      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f2:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f6:	e0d8      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
 8004218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	2300      	movs	r3, #0
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
 8004226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	6139      	str	r1, [r7, #16]
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800425c:	4659      	mov	r1, fp
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4651      	mov	r1, sl
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4651      	mov	r1, sl
 800426c:	ebb2 0801 	subs.w	r8, r2, r1
 8004270:	4659      	mov	r1, fp
 8004272:	eb63 0901 	sbc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	462b      	mov	r3, r5
 8004298:	eb49 0303 	adc.w	r3, r9, r3
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042aa:	4629      	mov	r1, r5
 80042ac:	024b      	lsls	r3, r1, #9
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b4:	4621      	mov	r1, r4
 80042b6:	024a      	lsls	r2, r1, #9
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c8:	f7fc fbc8 	bl	8000a5c <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	e058      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	4611      	mov	r1, r2
 80042e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004302:	0150      	lsls	r0, r2, #5
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4641      	mov	r1, r8
 800430a:	ebb2 0a01 	subs.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb63 0b01 	sbc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004328:	ebb2 040a 	subs.w	r4, r2, sl
 800432c:	eb63 050b 	sbc.w	r5, r3, fp
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	464b      	mov	r3, r9
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	61fa      	str	r2, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	f7fc fb6e 	bl	8000a5c <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3750      	adds	r7, #80	; 0x50
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000004 	.word	0x20000004

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08006110 	.word	0x08006110

08004404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e041      	b.n	800449a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fd9a 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f000 fb12 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e03c      	b.n	8004536 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_TIM_Base_Start+0xa0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_TIM_Base_Start+0x5c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d6:	d013      	beq.n	8004500 <HAL_TIM_Base_Start+0x5c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_TIM_Base_Start+0xa4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_TIM_Base_Start+0x5c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <HAL_TIM_Base_Start+0xa8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_TIM_Base_Start+0x5c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_TIM_Base_Start+0xac>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_TIM_Base_Start+0x5c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_TIM_Base_Start+0xb0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b06      	cmp	r3, #6
 8004510:	d010      	beq.n	8004534 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004522:	e007      	b.n	8004534 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40010000 	.word	0x40010000
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40014000 	.word	0x40014000

08004558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e041      	b.n	80045ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd fd28 	bl	8001fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 fa68 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_TIM_PWM_Start+0x24>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e022      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d109      	bne.n	8004636 <HAL_TIM_PWM_Start+0x3e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e015      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x58>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e008      	b.n	8004662 <HAL_TIM_PWM_Start+0x6a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e068      	b.n	800473c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0x82>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004678:	e013      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0x92>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xa2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	e003      	b.n	80046a2 <HAL_TIM_PWM_Start+0xaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc84 	bl	8004fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_TIM_PWM_Start+0x14c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_TIM_PWM_Start+0x14c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_TIM_PWM_Start+0x150>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIM_PWM_Start+0x154>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_TIM_PWM_Start+0x158>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_PWM_Start+0x10e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <HAL_TIM_PWM_Start+0x15c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d010      	beq.n	800473a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e007      	b.n	800473a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004772:	2302      	movs	r3, #2
 8004774:	e0ae      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b0c      	cmp	r3, #12
 8004782:	f200 809f 	bhi.w	80048c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080048c5 	.word	0x080048c5
 8004794:	080048c5 	.word	0x080048c5
 8004798:	080048c5 	.word	0x080048c5
 800479c:	08004801 	.word	0x08004801
 80047a0:	080048c5 	.word	0x080048c5
 80047a4:	080048c5 	.word	0x080048c5
 80047a8:	080048c5 	.word	0x080048c5
 80047ac:	08004843 	.word	0x08004843
 80047b0:	080048c5 	.word	0x080048c5
 80047b4:	080048c5 	.word	0x080048c5
 80047b8:	080048c5 	.word	0x080048c5
 80047bc:	08004883 	.word	0x08004883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f9d0 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
      break;
 80047fe:	e064      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa16 	bl	8004c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6999      	ldr	r1, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	619a      	str	r2, [r3, #24]
      break;
 8004840:	e043      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fa61 	bl	8004d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0208 	orr.w	r2, r2, #8
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0204 	bic.w	r2, r2, #4
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
      break;
 8004880:	e023      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 faab 	bl	8004de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      break;
 80048c2:	e002      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
      break;
 80048c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIM_ConfigClockSource+0x1c>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e0b4      	b.n	8004a62 <HAL_TIM_ConfigClockSource+0x186>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	d03e      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004936:	f200 8087 	bhi.w	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	f000 8086 	beq.w	8004a4e <HAL_TIM_ConfigClockSource+0x172>
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004946:	d87f      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d01a      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xa6>
 800494c:	2b70      	cmp	r3, #112	; 0x70
 800494e:	d87b      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d050      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004954:	2b60      	cmp	r3, #96	; 0x60
 8004956:	d877      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d03c      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xfa>
 800495c:	2b50      	cmp	r3, #80	; 0x50
 800495e:	d873      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d058      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x13a>
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d86f      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d064      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15a>
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d86b      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d060      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15a>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d867      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05c      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	2b10      	cmp	r3, #16
 800497e:	d05a      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15a>
 8004980:	e062      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6899      	ldr	r1, [r3, #8]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f000 faf1 	bl	8004f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	609a      	str	r2, [r3, #8]
      break;
 80049ae:	e04f      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f000 fada 	bl	8004f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d2:	609a      	str	r2, [r3, #8]
      break;
 80049d4:	e03c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f000 fa4e 	bl	8004e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2150      	movs	r1, #80	; 0x50
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 faa7 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 80049f4:	e02c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 fa6d 	bl	8004ee2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2160      	movs	r1, #96	; 0x60
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fa97 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004a14:	e01c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fa2e 	bl	8004e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fa87 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e00c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f000 fa7e 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004a46:	e003      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e000      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <TIM_Base_SetConfig+0xf4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <TIM_Base_SetConfig+0xf8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <TIM_Base_SetConfig+0xfc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d103      	bne.n	8004b3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	615a      	str	r2, [r3, #20]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0308 	bic.w	r3, r3, #8
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <TIM_OC1_SetConfig+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010000 	.word	0x40010000

08004c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC2_SetConfig+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d113      	bne.n	8004ce4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000

08004d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10d      	bne.n	8004d8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <TIM_OC3_SetConfig+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <TIM_OC4_SetConfig+0x9c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000

08004e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 030a 	bic.w	r3, r3, #10
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0210 	bic.w	r2, r3, #16
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f043 0307 	orr.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e050      	b.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005068:	d013      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a16      	ldr	r2, [pc, #88]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40014000 	.word	0x40014000

080050e0 <__errno>:
 80050e0:	4b01      	ldr	r3, [pc, #4]	; (80050e8 <__errno+0x8>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000010 	.word	0x20000010

080050ec <__libc_init_array>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4d0d      	ldr	r5, [pc, #52]	; (8005124 <__libc_init_array+0x38>)
 80050f0:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <__libc_init_array+0x3c>)
 80050f2:	1b64      	subs	r4, r4, r5
 80050f4:	10a4      	asrs	r4, r4, #2
 80050f6:	2600      	movs	r6, #0
 80050f8:	42a6      	cmp	r6, r4
 80050fa:	d109      	bne.n	8005110 <__libc_init_array+0x24>
 80050fc:	4d0b      	ldr	r5, [pc, #44]	; (800512c <__libc_init_array+0x40>)
 80050fe:	4c0c      	ldr	r4, [pc, #48]	; (8005130 <__libc_init_array+0x44>)
 8005100:	f000 ffae 	bl	8006060 <_init>
 8005104:	1b64      	subs	r4, r4, r5
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	2600      	movs	r6, #0
 800510a:	42a6      	cmp	r6, r4
 800510c:	d105      	bne.n	800511a <__libc_init_array+0x2e>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f855 3b04 	ldr.w	r3, [r5], #4
 8005114:	4798      	blx	r3
 8005116:	3601      	adds	r6, #1
 8005118:	e7ee      	b.n	80050f8 <__libc_init_array+0xc>
 800511a:	f855 3b04 	ldr.w	r3, [r5], #4
 800511e:	4798      	blx	r3
 8005120:	3601      	adds	r6, #1
 8005122:	e7f2      	b.n	800510a <__libc_init_array+0x1e>
 8005124:	080061b8 	.word	0x080061b8
 8005128:	080061b8 	.word	0x080061b8
 800512c:	080061b8 	.word	0x080061b8
 8005130:	080061bc 	.word	0x080061bc

08005134 <memset>:
 8005134:	4402      	add	r2, r0
 8005136:	4603      	mov	r3, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <memset+0xa>
 800513c:	4770      	bx	lr
 800513e:	f803 1b01 	strb.w	r1, [r3], #1
 8005142:	e7f9      	b.n	8005138 <memset+0x4>

08005144 <iprintf>:
 8005144:	b40f      	push	{r0, r1, r2, r3}
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <iprintf+0x2c>)
 8005148:	b513      	push	{r0, r1, r4, lr}
 800514a:	681c      	ldr	r4, [r3, #0]
 800514c:	b124      	cbz	r4, 8005158 <iprintf+0x14>
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	b913      	cbnz	r3, 8005158 <iprintf+0x14>
 8005152:	4620      	mov	r0, r4
 8005154:	f000 f866 	bl	8005224 <__sinit>
 8005158:	ab05      	add	r3, sp, #20
 800515a:	9a04      	ldr	r2, [sp, #16]
 800515c:	68a1      	ldr	r1, [r4, #8]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	4620      	mov	r0, r4
 8005162:	f000 f9bd 	bl	80054e0 <_vfiprintf_r>
 8005166:	b002      	add	sp, #8
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr
 8005170:	20000010 	.word	0x20000010

08005174 <std>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	e9c0 3300 	strd	r3, r3, [r0]
 800517e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005182:	6083      	str	r3, [r0, #8]
 8005184:	8181      	strh	r1, [r0, #12]
 8005186:	6643      	str	r3, [r0, #100]	; 0x64
 8005188:	81c2      	strh	r2, [r0, #14]
 800518a:	6183      	str	r3, [r0, #24]
 800518c:	4619      	mov	r1, r3
 800518e:	2208      	movs	r2, #8
 8005190:	305c      	adds	r0, #92	; 0x5c
 8005192:	f7ff ffcf 	bl	8005134 <memset>
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x38>)
 8005198:	6263      	str	r3, [r4, #36]	; 0x24
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x3c>)
 800519c:	62a3      	str	r3, [r4, #40]	; 0x28
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <std+0x40>)
 80051a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <std+0x44>)
 80051a4:	6224      	str	r4, [r4, #32]
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	08005a89 	.word	0x08005a89
 80051b0:	08005aab 	.word	0x08005aab
 80051b4:	08005ae3 	.word	0x08005ae3
 80051b8:	08005b07 	.word	0x08005b07

080051bc <_cleanup_r>:
 80051bc:	4901      	ldr	r1, [pc, #4]	; (80051c4 <_cleanup_r+0x8>)
 80051be:	f000 b8af 	b.w	8005320 <_fwalk_reent>
 80051c2:	bf00      	nop
 80051c4:	08005de1 	.word	0x08005de1

080051c8 <__sfmoreglue>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	2268      	movs	r2, #104	; 0x68
 80051cc:	1e4d      	subs	r5, r1, #1
 80051ce:	4355      	muls	r5, r2
 80051d0:	460e      	mov	r6, r1
 80051d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051d6:	f000 f8e5 	bl	80053a4 <_malloc_r>
 80051da:	4604      	mov	r4, r0
 80051dc:	b140      	cbz	r0, 80051f0 <__sfmoreglue+0x28>
 80051de:	2100      	movs	r1, #0
 80051e0:	e9c0 1600 	strd	r1, r6, [r0]
 80051e4:	300c      	adds	r0, #12
 80051e6:	60a0      	str	r0, [r4, #8]
 80051e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051ec:	f7ff ffa2 	bl	8005134 <memset>
 80051f0:	4620      	mov	r0, r4
 80051f2:	bd70      	pop	{r4, r5, r6, pc}

080051f4 <__sfp_lock_acquire>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__sfp_lock_acquire+0x8>)
 80051f6:	f000 b8b3 	b.w	8005360 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	200002cd 	.word	0x200002cd

08005200 <__sfp_lock_release>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_release+0x8>)
 8005202:	f000 b8ae 	b.w	8005362 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	200002cd 	.word	0x200002cd

0800520c <__sinit_lock_acquire>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__sinit_lock_acquire+0x8>)
 800520e:	f000 b8a7 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	200002ce 	.word	0x200002ce

08005218 <__sinit_lock_release>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__sinit_lock_release+0x8>)
 800521a:	f000 b8a2 	b.w	8005362 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	200002ce 	.word	0x200002ce

08005224 <__sinit>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	f7ff fff0 	bl	800520c <__sinit_lock_acquire>
 800522c:	69a3      	ldr	r3, [r4, #24]
 800522e:	b11b      	cbz	r3, 8005238 <__sinit+0x14>
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f7ff bff0 	b.w	8005218 <__sinit_lock_release>
 8005238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800523c:	6523      	str	r3, [r4, #80]	; 0x50
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <__sinit+0x68>)
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <__sinit+0x6c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	62a2      	str	r2, [r4, #40]	; 0x28
 8005246:	42a3      	cmp	r3, r4
 8005248:	bf04      	itt	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	61a3      	streq	r3, [r4, #24]
 800524e:	4620      	mov	r0, r4
 8005250:	f000 f820 	bl	8005294 <__sfp>
 8005254:	6060      	str	r0, [r4, #4]
 8005256:	4620      	mov	r0, r4
 8005258:	f000 f81c 	bl	8005294 <__sfp>
 800525c:	60a0      	str	r0, [r4, #8]
 800525e:	4620      	mov	r0, r4
 8005260:	f000 f818 	bl	8005294 <__sfp>
 8005264:	2200      	movs	r2, #0
 8005266:	60e0      	str	r0, [r4, #12]
 8005268:	2104      	movs	r1, #4
 800526a:	6860      	ldr	r0, [r4, #4]
 800526c:	f7ff ff82 	bl	8005174 <std>
 8005270:	68a0      	ldr	r0, [r4, #8]
 8005272:	2201      	movs	r2, #1
 8005274:	2109      	movs	r1, #9
 8005276:	f7ff ff7d 	bl	8005174 <std>
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	2202      	movs	r2, #2
 800527e:	2112      	movs	r1, #18
 8005280:	f7ff ff78 	bl	8005174 <std>
 8005284:	2301      	movs	r3, #1
 8005286:	61a3      	str	r3, [r4, #24]
 8005288:	e7d2      	b.n	8005230 <__sinit+0xc>
 800528a:	bf00      	nop
 800528c:	08006118 	.word	0x08006118
 8005290:	080051bd 	.word	0x080051bd

08005294 <__sfp>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	4607      	mov	r7, r0
 8005298:	f7ff ffac 	bl	80051f4 <__sfp_lock_acquire>
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <__sfp+0x84>)
 800529e:	681e      	ldr	r6, [r3, #0]
 80052a0:	69b3      	ldr	r3, [r6, #24]
 80052a2:	b913      	cbnz	r3, 80052aa <__sfp+0x16>
 80052a4:	4630      	mov	r0, r6
 80052a6:	f7ff ffbd 	bl	8005224 <__sinit>
 80052aa:	3648      	adds	r6, #72	; 0x48
 80052ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	d503      	bpl.n	80052bc <__sfp+0x28>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	b30b      	cbz	r3, 80052fc <__sfp+0x68>
 80052b8:	6836      	ldr	r6, [r6, #0]
 80052ba:	e7f7      	b.n	80052ac <__sfp+0x18>
 80052bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c0:	b9d5      	cbnz	r5, 80052f8 <__sfp+0x64>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <__sfp+0x88>)
 80052c4:	60e3      	str	r3, [r4, #12]
 80052c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052ca:	6665      	str	r5, [r4, #100]	; 0x64
 80052cc:	f000 f847 	bl	800535e <__retarget_lock_init_recursive>
 80052d0:	f7ff ff96 	bl	8005200 <__sfp_lock_release>
 80052d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052dc:	6025      	str	r5, [r4, #0]
 80052de:	61a5      	str	r5, [r4, #24]
 80052e0:	2208      	movs	r2, #8
 80052e2:	4629      	mov	r1, r5
 80052e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052e8:	f7ff ff24 	bl	8005134 <memset>
 80052ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f4:	4620      	mov	r0, r4
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	3468      	adds	r4, #104	; 0x68
 80052fa:	e7d9      	b.n	80052b0 <__sfp+0x1c>
 80052fc:	2104      	movs	r1, #4
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff ff62 	bl	80051c8 <__sfmoreglue>
 8005304:	4604      	mov	r4, r0
 8005306:	6030      	str	r0, [r6, #0]
 8005308:	2800      	cmp	r0, #0
 800530a:	d1d5      	bne.n	80052b8 <__sfp+0x24>
 800530c:	f7ff ff78 	bl	8005200 <__sfp_lock_release>
 8005310:	230c      	movs	r3, #12
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e7ee      	b.n	80052f4 <__sfp+0x60>
 8005316:	bf00      	nop
 8005318:	08006118 	.word	0x08006118
 800531c:	ffff0001 	.word	0xffff0001

08005320 <_fwalk_reent>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	4688      	mov	r8, r1
 8005328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800532c:	2700      	movs	r7, #0
 800532e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005332:	f1b9 0901 	subs.w	r9, r9, #1
 8005336:	d505      	bpl.n	8005344 <_fwalk_reent+0x24>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	2c00      	cmp	r4, #0
 800533c:	d1f7      	bne.n	800532e <_fwalk_reent+0xe>
 800533e:	4638      	mov	r0, r7
 8005340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005344:	89ab      	ldrh	r3, [r5, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d907      	bls.n	800535a <_fwalk_reent+0x3a>
 800534a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534e:	3301      	adds	r3, #1
 8005350:	d003      	beq.n	800535a <_fwalk_reent+0x3a>
 8005352:	4629      	mov	r1, r5
 8005354:	4630      	mov	r0, r6
 8005356:	47c0      	blx	r8
 8005358:	4307      	orrs	r7, r0
 800535a:	3568      	adds	r5, #104	; 0x68
 800535c:	e7e9      	b.n	8005332 <_fwalk_reent+0x12>

0800535e <__retarget_lock_init_recursive>:
 800535e:	4770      	bx	lr

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <sbrk_aligned>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4e0e      	ldr	r6, [pc, #56]	; (80053a0 <sbrk_aligned+0x3c>)
 8005368:	460c      	mov	r4, r1
 800536a:	6831      	ldr	r1, [r6, #0]
 800536c:	4605      	mov	r5, r0
 800536e:	b911      	cbnz	r1, 8005376 <sbrk_aligned+0x12>
 8005370:	f000 fb7a 	bl	8005a68 <_sbrk_r>
 8005374:	6030      	str	r0, [r6, #0]
 8005376:	4621      	mov	r1, r4
 8005378:	4628      	mov	r0, r5
 800537a:	f000 fb75 	bl	8005a68 <_sbrk_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d00a      	beq.n	8005398 <sbrk_aligned+0x34>
 8005382:	1cc4      	adds	r4, r0, #3
 8005384:	f024 0403 	bic.w	r4, r4, #3
 8005388:	42a0      	cmp	r0, r4
 800538a:	d007      	beq.n	800539c <sbrk_aligned+0x38>
 800538c:	1a21      	subs	r1, r4, r0
 800538e:	4628      	mov	r0, r5
 8005390:	f000 fb6a 	bl	8005a68 <_sbrk_r>
 8005394:	3001      	adds	r0, #1
 8005396:	d101      	bne.n	800539c <sbrk_aligned+0x38>
 8005398:	f04f 34ff 	mov.w	r4, #4294967295
 800539c:	4620      	mov	r0, r4
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	200002d4 	.word	0x200002d4

080053a4 <_malloc_r>:
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	1ccd      	adds	r5, r1, #3
 80053aa:	f025 0503 	bic.w	r5, r5, #3
 80053ae:	3508      	adds	r5, #8
 80053b0:	2d0c      	cmp	r5, #12
 80053b2:	bf38      	it	cc
 80053b4:	250c      	movcc	r5, #12
 80053b6:	2d00      	cmp	r5, #0
 80053b8:	4607      	mov	r7, r0
 80053ba:	db01      	blt.n	80053c0 <_malloc_r+0x1c>
 80053bc:	42a9      	cmp	r1, r5
 80053be:	d905      	bls.n	80053cc <_malloc_r+0x28>
 80053c0:	230c      	movs	r3, #12
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	2600      	movs	r6, #0
 80053c6:	4630      	mov	r0, r6
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053cc:	4e2e      	ldr	r6, [pc, #184]	; (8005488 <_malloc_r+0xe4>)
 80053ce:	f000 fdbb 	bl	8005f48 <__malloc_lock>
 80053d2:	6833      	ldr	r3, [r6, #0]
 80053d4:	461c      	mov	r4, r3
 80053d6:	bb34      	cbnz	r4, 8005426 <_malloc_r+0x82>
 80053d8:	4629      	mov	r1, r5
 80053da:	4638      	mov	r0, r7
 80053dc:	f7ff ffc2 	bl	8005364 <sbrk_aligned>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	4604      	mov	r4, r0
 80053e4:	d14d      	bne.n	8005482 <_malloc_r+0xde>
 80053e6:	6834      	ldr	r4, [r6, #0]
 80053e8:	4626      	mov	r6, r4
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	d140      	bne.n	8005470 <_malloc_r+0xcc>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	4631      	mov	r1, r6
 80053f2:	4638      	mov	r0, r7
 80053f4:	eb04 0803 	add.w	r8, r4, r3
 80053f8:	f000 fb36 	bl	8005a68 <_sbrk_r>
 80053fc:	4580      	cmp	r8, r0
 80053fe:	d13a      	bne.n	8005476 <_malloc_r+0xd2>
 8005400:	6821      	ldr	r1, [r4, #0]
 8005402:	3503      	adds	r5, #3
 8005404:	1a6d      	subs	r5, r5, r1
 8005406:	f025 0503 	bic.w	r5, r5, #3
 800540a:	3508      	adds	r5, #8
 800540c:	2d0c      	cmp	r5, #12
 800540e:	bf38      	it	cc
 8005410:	250c      	movcc	r5, #12
 8005412:	4629      	mov	r1, r5
 8005414:	4638      	mov	r0, r7
 8005416:	f7ff ffa5 	bl	8005364 <sbrk_aligned>
 800541a:	3001      	adds	r0, #1
 800541c:	d02b      	beq.n	8005476 <_malloc_r+0xd2>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	442b      	add	r3, r5
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	e00e      	b.n	8005444 <_malloc_r+0xa0>
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	1b52      	subs	r2, r2, r5
 800542a:	d41e      	bmi.n	800546a <_malloc_r+0xc6>
 800542c:	2a0b      	cmp	r2, #11
 800542e:	d916      	bls.n	800545e <_malloc_r+0xba>
 8005430:	1961      	adds	r1, r4, r5
 8005432:	42a3      	cmp	r3, r4
 8005434:	6025      	str	r5, [r4, #0]
 8005436:	bf18      	it	ne
 8005438:	6059      	strne	r1, [r3, #4]
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	bf08      	it	eq
 800543e:	6031      	streq	r1, [r6, #0]
 8005440:	5162      	str	r2, [r4, r5]
 8005442:	604b      	str	r3, [r1, #4]
 8005444:	4638      	mov	r0, r7
 8005446:	f104 060b 	add.w	r6, r4, #11
 800544a:	f000 fd83 	bl	8005f54 <__malloc_unlock>
 800544e:	f026 0607 	bic.w	r6, r6, #7
 8005452:	1d23      	adds	r3, r4, #4
 8005454:	1af2      	subs	r2, r6, r3
 8005456:	d0b6      	beq.n	80053c6 <_malloc_r+0x22>
 8005458:	1b9b      	subs	r3, r3, r6
 800545a:	50a3      	str	r3, [r4, r2]
 800545c:	e7b3      	b.n	80053c6 <_malloc_r+0x22>
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	42a3      	cmp	r3, r4
 8005462:	bf0c      	ite	eq
 8005464:	6032      	streq	r2, [r6, #0]
 8005466:	605a      	strne	r2, [r3, #4]
 8005468:	e7ec      	b.n	8005444 <_malloc_r+0xa0>
 800546a:	4623      	mov	r3, r4
 800546c:	6864      	ldr	r4, [r4, #4]
 800546e:	e7b2      	b.n	80053d6 <_malloc_r+0x32>
 8005470:	4634      	mov	r4, r6
 8005472:	6876      	ldr	r6, [r6, #4]
 8005474:	e7b9      	b.n	80053ea <_malloc_r+0x46>
 8005476:	230c      	movs	r3, #12
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	4638      	mov	r0, r7
 800547c:	f000 fd6a 	bl	8005f54 <__malloc_unlock>
 8005480:	e7a1      	b.n	80053c6 <_malloc_r+0x22>
 8005482:	6025      	str	r5, [r4, #0]
 8005484:	e7de      	b.n	8005444 <_malloc_r+0xa0>
 8005486:	bf00      	nop
 8005488:	200002d0 	.word	0x200002d0

0800548c <__sfputc_r>:
 800548c:	6893      	ldr	r3, [r2, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	b410      	push	{r4}
 8005494:	6093      	str	r3, [r2, #8]
 8005496:	da08      	bge.n	80054aa <__sfputc_r+0x1e>
 8005498:	6994      	ldr	r4, [r2, #24]
 800549a:	42a3      	cmp	r3, r4
 800549c:	db01      	blt.n	80054a2 <__sfputc_r+0x16>
 800549e:	290a      	cmp	r1, #10
 80054a0:	d103      	bne.n	80054aa <__sfputc_r+0x1e>
 80054a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a6:	f000 bb33 	b.w	8005b10 <__swbuf_r>
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	1c58      	adds	r0, r3, #1
 80054ae:	6010      	str	r0, [r2, #0]
 80054b0:	7019      	strb	r1, [r3, #0]
 80054b2:	4608      	mov	r0, r1
 80054b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <__sfputs_r>:
 80054ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054bc:	4606      	mov	r6, r0
 80054be:	460f      	mov	r7, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	18d5      	adds	r5, r2, r3
 80054c4:	42ac      	cmp	r4, r5
 80054c6:	d101      	bne.n	80054cc <__sfputs_r+0x12>
 80054c8:	2000      	movs	r0, #0
 80054ca:	e007      	b.n	80054dc <__sfputs_r+0x22>
 80054cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d0:	463a      	mov	r2, r7
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff ffda 	bl	800548c <__sfputc_r>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d1f3      	bne.n	80054c4 <__sfputs_r+0xa>
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054e0 <_vfiprintf_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	460d      	mov	r5, r1
 80054e6:	b09d      	sub	sp, #116	; 0x74
 80054e8:	4614      	mov	r4, r2
 80054ea:	4698      	mov	r8, r3
 80054ec:	4606      	mov	r6, r0
 80054ee:	b118      	cbz	r0, 80054f8 <_vfiprintf_r+0x18>
 80054f0:	6983      	ldr	r3, [r0, #24]
 80054f2:	b90b      	cbnz	r3, 80054f8 <_vfiprintf_r+0x18>
 80054f4:	f7ff fe96 	bl	8005224 <__sinit>
 80054f8:	4b89      	ldr	r3, [pc, #548]	; (8005720 <_vfiprintf_r+0x240>)
 80054fa:	429d      	cmp	r5, r3
 80054fc:	d11b      	bne.n	8005536 <_vfiprintf_r+0x56>
 80054fe:	6875      	ldr	r5, [r6, #4]
 8005500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	d405      	bmi.n	8005512 <_vfiprintf_r+0x32>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	059a      	lsls	r2, r3, #22
 800550a:	d402      	bmi.n	8005512 <_vfiprintf_r+0x32>
 800550c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550e:	f7ff ff27 	bl	8005360 <__retarget_lock_acquire_recursive>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	d501      	bpl.n	800551c <_vfiprintf_r+0x3c>
 8005518:	692b      	ldr	r3, [r5, #16]
 800551a:	b9eb      	cbnz	r3, 8005558 <_vfiprintf_r+0x78>
 800551c:	4629      	mov	r1, r5
 800551e:	4630      	mov	r0, r6
 8005520:	f000 fb5a 	bl	8005bd8 <__swsetup_r>
 8005524:	b1c0      	cbz	r0, 8005558 <_vfiprintf_r+0x78>
 8005526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005528:	07dc      	lsls	r4, r3, #31
 800552a:	d50e      	bpl.n	800554a <_vfiprintf_r+0x6a>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	b01d      	add	sp, #116	; 0x74
 8005532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005536:	4b7b      	ldr	r3, [pc, #492]	; (8005724 <_vfiprintf_r+0x244>)
 8005538:	429d      	cmp	r5, r3
 800553a:	d101      	bne.n	8005540 <_vfiprintf_r+0x60>
 800553c:	68b5      	ldr	r5, [r6, #8]
 800553e:	e7df      	b.n	8005500 <_vfiprintf_r+0x20>
 8005540:	4b79      	ldr	r3, [pc, #484]	; (8005728 <_vfiprintf_r+0x248>)
 8005542:	429d      	cmp	r5, r3
 8005544:	bf08      	it	eq
 8005546:	68f5      	ldreq	r5, [r6, #12]
 8005548:	e7da      	b.n	8005500 <_vfiprintf_r+0x20>
 800554a:	89ab      	ldrh	r3, [r5, #12]
 800554c:	0598      	lsls	r0, r3, #22
 800554e:	d4ed      	bmi.n	800552c <_vfiprintf_r+0x4c>
 8005550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005552:	f7ff ff06 	bl	8005362 <__retarget_lock_release_recursive>
 8005556:	e7e9      	b.n	800552c <_vfiprintf_r+0x4c>
 8005558:	2300      	movs	r3, #0
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	2320      	movs	r3, #32
 800555e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005562:	f8cd 800c 	str.w	r8, [sp, #12]
 8005566:	2330      	movs	r3, #48	; 0x30
 8005568:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800572c <_vfiprintf_r+0x24c>
 800556c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005570:	f04f 0901 	mov.w	r9, #1
 8005574:	4623      	mov	r3, r4
 8005576:	469a      	mov	sl, r3
 8005578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557c:	b10a      	cbz	r2, 8005582 <_vfiprintf_r+0xa2>
 800557e:	2a25      	cmp	r2, #37	; 0x25
 8005580:	d1f9      	bne.n	8005576 <_vfiprintf_r+0x96>
 8005582:	ebba 0b04 	subs.w	fp, sl, r4
 8005586:	d00b      	beq.n	80055a0 <_vfiprintf_r+0xc0>
 8005588:	465b      	mov	r3, fp
 800558a:	4622      	mov	r2, r4
 800558c:	4629      	mov	r1, r5
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff ff93 	bl	80054ba <__sfputs_r>
 8005594:	3001      	adds	r0, #1
 8005596:	f000 80aa 	beq.w	80056ee <_vfiprintf_r+0x20e>
 800559a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559c:	445a      	add	r2, fp
 800559e:	9209      	str	r2, [sp, #36]	; 0x24
 80055a0:	f89a 3000 	ldrb.w	r3, [sl]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a2 	beq.w	80056ee <_vfiprintf_r+0x20e>
 80055aa:	2300      	movs	r3, #0
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b4:	f10a 0a01 	add.w	sl, sl, #1
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c0:	931a      	str	r3, [sp, #104]	; 0x68
 80055c2:	4654      	mov	r4, sl
 80055c4:	2205      	movs	r2, #5
 80055c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ca:	4858      	ldr	r0, [pc, #352]	; (800572c <_vfiprintf_r+0x24c>)
 80055cc:	f7fa fe08 	bl	80001e0 <memchr>
 80055d0:	9a04      	ldr	r2, [sp, #16]
 80055d2:	b9d8      	cbnz	r0, 800560c <_vfiprintf_r+0x12c>
 80055d4:	06d1      	lsls	r1, r2, #27
 80055d6:	bf44      	itt	mi
 80055d8:	2320      	movmi	r3, #32
 80055da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055de:	0713      	lsls	r3, r2, #28
 80055e0:	bf44      	itt	mi
 80055e2:	232b      	movmi	r3, #43	; 0x2b
 80055e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e8:	f89a 3000 	ldrb.w	r3, [sl]
 80055ec:	2b2a      	cmp	r3, #42	; 0x2a
 80055ee:	d015      	beq.n	800561c <_vfiprintf_r+0x13c>
 80055f0:	9a07      	ldr	r2, [sp, #28]
 80055f2:	4654      	mov	r4, sl
 80055f4:	2000      	movs	r0, #0
 80055f6:	f04f 0c0a 	mov.w	ip, #10
 80055fa:	4621      	mov	r1, r4
 80055fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005600:	3b30      	subs	r3, #48	; 0x30
 8005602:	2b09      	cmp	r3, #9
 8005604:	d94e      	bls.n	80056a4 <_vfiprintf_r+0x1c4>
 8005606:	b1b0      	cbz	r0, 8005636 <_vfiprintf_r+0x156>
 8005608:	9207      	str	r2, [sp, #28]
 800560a:	e014      	b.n	8005636 <_vfiprintf_r+0x156>
 800560c:	eba0 0308 	sub.w	r3, r0, r8
 8005610:	fa09 f303 	lsl.w	r3, r9, r3
 8005614:	4313      	orrs	r3, r2
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	46a2      	mov	sl, r4
 800561a:	e7d2      	b.n	80055c2 <_vfiprintf_r+0xe2>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	1d19      	adds	r1, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	9103      	str	r1, [sp, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	bfbb      	ittet	lt
 8005628:	425b      	neglt	r3, r3
 800562a:	f042 0202 	orrlt.w	r2, r2, #2
 800562e:	9307      	strge	r3, [sp, #28]
 8005630:	9307      	strlt	r3, [sp, #28]
 8005632:	bfb8      	it	lt
 8005634:	9204      	strlt	r2, [sp, #16]
 8005636:	7823      	ldrb	r3, [r4, #0]
 8005638:	2b2e      	cmp	r3, #46	; 0x2e
 800563a:	d10c      	bne.n	8005656 <_vfiprintf_r+0x176>
 800563c:	7863      	ldrb	r3, [r4, #1]
 800563e:	2b2a      	cmp	r3, #42	; 0x2a
 8005640:	d135      	bne.n	80056ae <_vfiprintf_r+0x1ce>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9203      	str	r2, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfb8      	it	lt
 800564e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005652:	3402      	adds	r4, #2
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800573c <_vfiprintf_r+0x25c>
 800565a:	7821      	ldrb	r1, [r4, #0]
 800565c:	2203      	movs	r2, #3
 800565e:	4650      	mov	r0, sl
 8005660:	f7fa fdbe 	bl	80001e0 <memchr>
 8005664:	b140      	cbz	r0, 8005678 <_vfiprintf_r+0x198>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	eba0 000a 	sub.w	r0, r0, sl
 800566c:	fa03 f000 	lsl.w	r0, r3, r0
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	4303      	orrs	r3, r0
 8005674:	3401      	adds	r4, #1
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567c:	482c      	ldr	r0, [pc, #176]	; (8005730 <_vfiprintf_r+0x250>)
 800567e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005682:	2206      	movs	r2, #6
 8005684:	f7fa fdac 	bl	80001e0 <memchr>
 8005688:	2800      	cmp	r0, #0
 800568a:	d03f      	beq.n	800570c <_vfiprintf_r+0x22c>
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <_vfiprintf_r+0x254>)
 800568e:	bb1b      	cbnz	r3, 80056d8 <_vfiprintf_r+0x1f8>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	3307      	adds	r3, #7
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	3308      	adds	r3, #8
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	443b      	add	r3, r7
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	e767      	b.n	8005574 <_vfiprintf_r+0x94>
 80056a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a8:	460c      	mov	r4, r1
 80056aa:	2001      	movs	r0, #1
 80056ac:	e7a5      	b.n	80055fa <_vfiprintf_r+0x11a>
 80056ae:	2300      	movs	r3, #0
 80056b0:	3401      	adds	r4, #1
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 0c0a 	mov.w	ip, #10
 80056ba:	4620      	mov	r0, r4
 80056bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c0:	3a30      	subs	r2, #48	; 0x30
 80056c2:	2a09      	cmp	r2, #9
 80056c4:	d903      	bls.n	80056ce <_vfiprintf_r+0x1ee>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0c5      	beq.n	8005656 <_vfiprintf_r+0x176>
 80056ca:	9105      	str	r1, [sp, #20]
 80056cc:	e7c3      	b.n	8005656 <_vfiprintf_r+0x176>
 80056ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d2:	4604      	mov	r4, r0
 80056d4:	2301      	movs	r3, #1
 80056d6:	e7f0      	b.n	80056ba <_vfiprintf_r+0x1da>
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	462a      	mov	r2, r5
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <_vfiprintf_r+0x258>)
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	4630      	mov	r0, r6
 80056e4:	f3af 8000 	nop.w
 80056e8:	4607      	mov	r7, r0
 80056ea:	1c78      	adds	r0, r7, #1
 80056ec:	d1d6      	bne.n	800569c <_vfiprintf_r+0x1bc>
 80056ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f0:	07d9      	lsls	r1, r3, #31
 80056f2:	d405      	bmi.n	8005700 <_vfiprintf_r+0x220>
 80056f4:	89ab      	ldrh	r3, [r5, #12]
 80056f6:	059a      	lsls	r2, r3, #22
 80056f8:	d402      	bmi.n	8005700 <_vfiprintf_r+0x220>
 80056fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fc:	f7ff fe31 	bl	8005362 <__retarget_lock_release_recursive>
 8005700:	89ab      	ldrh	r3, [r5, #12]
 8005702:	065b      	lsls	r3, r3, #25
 8005704:	f53f af12 	bmi.w	800552c <_vfiprintf_r+0x4c>
 8005708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570a:	e711      	b.n	8005530 <_vfiprintf_r+0x50>
 800570c:	ab03      	add	r3, sp, #12
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	462a      	mov	r2, r5
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <_vfiprintf_r+0x258>)
 8005714:	a904      	add	r1, sp, #16
 8005716:	4630      	mov	r0, r6
 8005718:	f000 f880 	bl	800581c <_printf_i>
 800571c:	e7e4      	b.n	80056e8 <_vfiprintf_r+0x208>
 800571e:	bf00      	nop
 8005720:	0800613c 	.word	0x0800613c
 8005724:	0800615c 	.word	0x0800615c
 8005728:	0800611c 	.word	0x0800611c
 800572c:	0800617c 	.word	0x0800617c
 8005730:	08006186 	.word	0x08006186
 8005734:	00000000 	.word	0x00000000
 8005738:	080054bb 	.word	0x080054bb
 800573c:	08006182 	.word	0x08006182

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4616      	mov	r6, r2
 8005746:	4699      	mov	r9, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005750:	4293      	cmp	r3, r2
 8005752:	bfb8      	it	lt
 8005754:	4613      	movlt	r3, r2
 8005756:	6033      	str	r3, [r6, #0]
 8005758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800575c:	4607      	mov	r7, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b10a      	cbz	r2, 8005766 <_printf_common+0x26>
 8005762:	3301      	adds	r3, #1
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	0699      	lsls	r1, r3, #26
 800576a:	bf42      	ittt	mi
 800576c:	6833      	ldrmi	r3, [r6, #0]
 800576e:	3302      	addmi	r3, #2
 8005770:	6033      	strmi	r3, [r6, #0]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d106      	bne.n	8005788 <_printf_common+0x48>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc26      	bgt.n	80057d6 <_printf_common+0x96>
 8005788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800578c:	1e13      	subs	r3, r2, #0
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	2301      	movne	r3, #1
 8005794:	0692      	lsls	r2, r2, #26
 8005796:	d42b      	bmi.n	80057f0 <_printf_common+0xb0>
 8005798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800579c:	4649      	mov	r1, r9
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d01e      	beq.n	80057e4 <_printf_common+0xa4>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	68e5      	ldr	r5, [r4, #12]
 80057aa:	6832      	ldr	r2, [r6, #0]
 80057ac:	f003 0306 	and.w	r3, r3, #6
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	bf08      	it	eq
 80057b4:	1aad      	subeq	r5, r5, r2
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	bf0c      	ite	eq
 80057bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c0:	2500      	movne	r5, #0
 80057c2:	4293      	cmp	r3, r2
 80057c4:	bfc4      	itt	gt
 80057c6:	1a9b      	subgt	r3, r3, r2
 80057c8:	18ed      	addgt	r5, r5, r3
 80057ca:	2600      	movs	r6, #0
 80057cc:	341a      	adds	r4, #26
 80057ce:	42b5      	cmp	r5, r6
 80057d0:	d11a      	bne.n	8005808 <_printf_common+0xc8>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e008      	b.n	80057e8 <_printf_common+0xa8>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4652      	mov	r2, sl
 80057da:	4649      	mov	r1, r9
 80057dc:	4638      	mov	r0, r7
 80057de:	47c0      	blx	r8
 80057e0:	3001      	adds	r0, #1
 80057e2:	d103      	bne.n	80057ec <_printf_common+0xac>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	3501      	adds	r5, #1
 80057ee:	e7c6      	b.n	800577e <_printf_common+0x3e>
 80057f0:	18e1      	adds	r1, r4, r3
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	2030      	movs	r0, #48	; 0x30
 80057f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fa:	4422      	add	r2, r4
 80057fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005804:	3302      	adds	r3, #2
 8005806:	e7c7      	b.n	8005798 <_printf_common+0x58>
 8005808:	2301      	movs	r3, #1
 800580a:	4622      	mov	r2, r4
 800580c:	4649      	mov	r1, r9
 800580e:	4638      	mov	r0, r7
 8005810:	47c0      	blx	r8
 8005812:	3001      	adds	r0, #1
 8005814:	d0e6      	beq.n	80057e4 <_printf_common+0xa4>
 8005816:	3601      	adds	r6, #1
 8005818:	e7d9      	b.n	80057ce <_printf_common+0x8e>
	...

0800581c <_printf_i>:
 800581c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	7e0f      	ldrb	r7, [r1, #24]
 8005822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005824:	2f78      	cmp	r7, #120	; 0x78
 8005826:	4691      	mov	r9, r2
 8005828:	4680      	mov	r8, r0
 800582a:	460c      	mov	r4, r1
 800582c:	469a      	mov	sl, r3
 800582e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005832:	d807      	bhi.n	8005844 <_printf_i+0x28>
 8005834:	2f62      	cmp	r7, #98	; 0x62
 8005836:	d80a      	bhi.n	800584e <_printf_i+0x32>
 8005838:	2f00      	cmp	r7, #0
 800583a:	f000 80d8 	beq.w	80059ee <_printf_i+0x1d2>
 800583e:	2f58      	cmp	r7, #88	; 0x58
 8005840:	f000 80a3 	beq.w	800598a <_printf_i+0x16e>
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800584c:	e03a      	b.n	80058c4 <_printf_i+0xa8>
 800584e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005852:	2b15      	cmp	r3, #21
 8005854:	d8f6      	bhi.n	8005844 <_printf_i+0x28>
 8005856:	a101      	add	r1, pc, #4	; (adr r1, 800585c <_printf_i+0x40>)
 8005858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058c9 	.word	0x080058c9
 8005864:	08005845 	.word	0x08005845
 8005868:	08005845 	.word	0x08005845
 800586c:	08005845 	.word	0x08005845
 8005870:	08005845 	.word	0x08005845
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005845 	.word	0x08005845
 800587c:	08005845 	.word	0x08005845
 8005880:	08005845 	.word	0x08005845
 8005884:	08005845 	.word	0x08005845
 8005888:	080059d5 	.word	0x080059d5
 800588c:	080058f9 	.word	0x080058f9
 8005890:	080059b7 	.word	0x080059b7
 8005894:	08005845 	.word	0x08005845
 8005898:	08005845 	.word	0x08005845
 800589c:	080059f7 	.word	0x080059f7
 80058a0:	08005845 	.word	0x08005845
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	08005845 	.word	0x08005845
 80058ac:	08005845 	.word	0x08005845
 80058b0:	080059bf 	.word	0x080059bf
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	602a      	str	r2, [r5, #0]
 80058bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0a3      	b.n	8005a10 <_printf_i+0x1f4>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	6829      	ldr	r1, [r5, #0]
 80058cc:	0606      	lsls	r6, r0, #24
 80058ce:	f101 0304 	add.w	r3, r1, #4
 80058d2:	d50a      	bpl.n	80058ea <_printf_i+0xce>
 80058d4:	680e      	ldr	r6, [r1, #0]
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	2e00      	cmp	r6, #0
 80058da:	da03      	bge.n	80058e4 <_printf_i+0xc8>
 80058dc:	232d      	movs	r3, #45	; 0x2d
 80058de:	4276      	negs	r6, r6
 80058e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e4:	485e      	ldr	r0, [pc, #376]	; (8005a60 <_printf_i+0x244>)
 80058e6:	230a      	movs	r3, #10
 80058e8:	e019      	b.n	800591e <_printf_i+0x102>
 80058ea:	680e      	ldr	r6, [r1, #0]
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f2:	bf18      	it	ne
 80058f4:	b236      	sxthne	r6, r6
 80058f6:	e7ef      	b.n	80058d8 <_printf_i+0xbc>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	6029      	str	r1, [r5, #0]
 8005900:	0601      	lsls	r1, r0, #24
 8005902:	d501      	bpl.n	8005908 <_printf_i+0xec>
 8005904:	681e      	ldr	r6, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0xf2>
 8005908:	0646      	lsls	r6, r0, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0xe8>
 800590c:	881e      	ldrh	r6, [r3, #0]
 800590e:	4854      	ldr	r0, [pc, #336]	; (8005a60 <_printf_i+0x244>)
 8005910:	2f6f      	cmp	r7, #111	; 0x6f
 8005912:	bf0c      	ite	eq
 8005914:	2308      	moveq	r3, #8
 8005916:	230a      	movne	r3, #10
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800591e:	6865      	ldr	r5, [r4, #4]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	2d00      	cmp	r5, #0
 8005924:	bfa2      	ittt	ge
 8005926:	6821      	ldrge	r1, [r4, #0]
 8005928:	f021 0104 	bicge.w	r1, r1, #4
 800592c:	6021      	strge	r1, [r4, #0]
 800592e:	b90e      	cbnz	r6, 8005934 <_printf_i+0x118>
 8005930:	2d00      	cmp	r5, #0
 8005932:	d04d      	beq.n	80059d0 <_printf_i+0x1b4>
 8005934:	4615      	mov	r5, r2
 8005936:	fbb6 f1f3 	udiv	r1, r6, r3
 800593a:	fb03 6711 	mls	r7, r3, r1, r6
 800593e:	5dc7      	ldrb	r7, [r0, r7]
 8005940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005944:	4637      	mov	r7, r6
 8005946:	42bb      	cmp	r3, r7
 8005948:	460e      	mov	r6, r1
 800594a:	d9f4      	bls.n	8005936 <_printf_i+0x11a>
 800594c:	2b08      	cmp	r3, #8
 800594e:	d10b      	bne.n	8005968 <_printf_i+0x14c>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07de      	lsls	r6, r3, #31
 8005954:	d508      	bpl.n	8005968 <_printf_i+0x14c>
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	6861      	ldr	r1, [r4, #4]
 800595a:	4299      	cmp	r1, r3
 800595c:	bfde      	ittt	le
 800595e:	2330      	movle	r3, #48	; 0x30
 8005960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	6122      	str	r2, [r4, #16]
 800596c:	f8cd a000 	str.w	sl, [sp]
 8005970:	464b      	mov	r3, r9
 8005972:	aa03      	add	r2, sp, #12
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff fee2 	bl	8005740 <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	d14c      	bne.n	8005a1a <_printf_i+0x1fe>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	b004      	add	sp, #16
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	4835      	ldr	r0, [pc, #212]	; (8005a60 <_printf_i+0x244>)
 800598c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005990:	6829      	ldr	r1, [r5, #0]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f851 6b04 	ldr.w	r6, [r1], #4
 8005998:	6029      	str	r1, [r5, #0]
 800599a:	061d      	lsls	r5, r3, #24
 800599c:	d514      	bpl.n	80059c8 <_printf_i+0x1ac>
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	bf44      	itt	mi
 80059a2:	f043 0320 	orrmi.w	r3, r3, #32
 80059a6:	6023      	strmi	r3, [r4, #0]
 80059a8:	b91e      	cbnz	r6, 80059b2 <_printf_i+0x196>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f023 0320 	bic.w	r3, r3, #32
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	2310      	movs	r3, #16
 80059b4:	e7b0      	b.n	8005918 <_printf_i+0xfc>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	2378      	movs	r3, #120	; 0x78
 80059c0:	4828      	ldr	r0, [pc, #160]	; (8005a64 <_printf_i+0x248>)
 80059c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059c6:	e7e3      	b.n	8005990 <_printf_i+0x174>
 80059c8:	0659      	lsls	r1, r3, #25
 80059ca:	bf48      	it	mi
 80059cc:	b2b6      	uxthmi	r6, r6
 80059ce:	e7e6      	b.n	800599e <_printf_i+0x182>
 80059d0:	4615      	mov	r5, r2
 80059d2:	e7bb      	b.n	800594c <_printf_i+0x130>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6826      	ldr	r6, [r4, #0]
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6028      	str	r0, [r5, #0]
 80059de:	0635      	lsls	r5, r6, #24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0x1cc>
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0x1d2>
 80059e8:	0670      	lsls	r0, r6, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0x1c8>
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	4615      	mov	r5, r2
 80059f4:	e7ba      	b.n	800596c <_printf_i+0x150>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7fa fbec 	bl	80001e0 <memchr>
 8005a08:	b108      	cbz	r0, 8005a0e <_printf_i+0x1f2>
 8005a0a:	1b40      	subs	r0, r0, r5
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	e7a8      	b.n	800596c <_printf_i+0x150>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0ab      	beq.n	8005980 <_printf_i+0x164>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d413      	bmi.n	8005a56 <_printf_i+0x23a>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e7a4      	b.n	8005984 <_printf_i+0x168>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d09b      	beq.n	8005980 <_printf_i+0x164>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dcf2      	bgt.n	8005a3a <_printf_i+0x21e>
 8005a54:	e7eb      	b.n	8005a2e <_printf_i+0x212>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f104 0619 	add.w	r6, r4, #25
 8005a5c:	e7f5      	b.n	8005a4a <_printf_i+0x22e>
 8005a5e:	bf00      	nop
 8005a60:	0800618d 	.word	0x0800618d
 8005a64:	0800619e 	.word	0x0800619e

08005a68 <_sbrk_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d06      	ldr	r5, [pc, #24]	; (8005a84 <_sbrk_r+0x1c>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f7fc fbca 	bl	800220c <_sbrk>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_sbrk_r+0x1a>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_sbrk_r+0x1a>
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200002d8 	.word	0x200002d8

08005a88 <__sread>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	f000 fab2 	bl	8005ff8 <_read_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	bfab      	itete	ge
 8005a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a9c:	181b      	addge	r3, r3, r0
 8005a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aa2:	bfac      	ite	ge
 8005aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa6:	81a3      	strhlt	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__swrite>:
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	461f      	mov	r7, r3
 8005ab0:	898b      	ldrh	r3, [r1, #12]
 8005ab2:	05db      	lsls	r3, r3, #23
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4616      	mov	r6, r2
 8005aba:	d505      	bpl.n	8005ac8 <__swrite+0x1e>
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f000 f9c8 	bl	8005e58 <_lseek_r>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	4628      	mov	r0, r5
 8005ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ade:	f000 b869 	b.w	8005bb4 <_write_r>

08005ae2 <__sseek>:
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aea:	f000 f9b5 	bl	8005e58 <_lseek_r>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	bf15      	itete	ne
 8005af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afe:	81a3      	strheq	r3, [r4, #12]
 8005b00:	bf18      	it	ne
 8005b02:	81a3      	strhne	r3, [r4, #12]
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <__sclose>:
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 b8d3 	b.w	8005cb4 <_close_r>
	...

08005b10 <__swbuf_r>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	460e      	mov	r6, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	4605      	mov	r5, r0
 8005b18:	b118      	cbz	r0, 8005b22 <__swbuf_r+0x12>
 8005b1a:	6983      	ldr	r3, [r0, #24]
 8005b1c:	b90b      	cbnz	r3, 8005b22 <__swbuf_r+0x12>
 8005b1e:	f7ff fb81 	bl	8005224 <__sinit>
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <__swbuf_r+0x98>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d12b      	bne.n	8005b80 <__swbuf_r+0x70>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	69a3      	ldr	r3, [r4, #24]
 8005b2c:	60a3      	str	r3, [r4, #8]
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	071a      	lsls	r2, r3, #28
 8005b32:	d52f      	bpl.n	8005b94 <__swbuf_r+0x84>
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	b36b      	cbz	r3, 8005b94 <__swbuf_r+0x84>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6963      	ldr	r3, [r4, #20]
 8005b40:	b2f6      	uxtb	r6, r6
 8005b42:	4283      	cmp	r3, r0
 8005b44:	4637      	mov	r7, r6
 8005b46:	dc04      	bgt.n	8005b52 <__swbuf_r+0x42>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f948 	bl	8005de0 <_fflush_r>
 8005b50:	bb30      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	6022      	str	r2, [r4, #0]
 8005b5e:	701e      	strb	r6, [r3, #0]
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	3001      	adds	r0, #1
 8005b64:	4283      	cmp	r3, r0
 8005b66:	d004      	beq.n	8005b72 <__swbuf_r+0x62>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d506      	bpl.n	8005b7c <__swbuf_r+0x6c>
 8005b6e:	2e0a      	cmp	r6, #10
 8005b70:	d104      	bne.n	8005b7c <__swbuf_r+0x6c>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f933 	bl	8005de0 <_fflush_r>
 8005b7a:	b988      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <__swbuf_r+0x9c>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d101      	bne.n	8005b8a <__swbuf_r+0x7a>
 8005b86:	68ac      	ldr	r4, [r5, #8]
 8005b88:	e7cf      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <__swbuf_r+0xa0>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	bf08      	it	eq
 8005b90:	68ec      	ldreq	r4, [r5, #12]
 8005b92:	e7ca      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f81e 	bl	8005bd8 <__swsetup_r>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d0cb      	beq.n	8005b38 <__swbuf_r+0x28>
 8005ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ba4:	e7ea      	b.n	8005b7c <__swbuf_r+0x6c>
 8005ba6:	bf00      	nop
 8005ba8:	0800613c 	.word	0x0800613c
 8005bac:	0800615c 	.word	0x0800615c
 8005bb0:	0800611c 	.word	0x0800611c

08005bb4 <_write_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	; (8005bd4 <_write_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fc fad1 	bl	800216a <_write>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_write_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_write_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	200002d8 	.word	0x200002d8

08005bd8 <__swsetup_r>:
 8005bd8:	4b32      	ldr	r3, [pc, #200]	; (8005ca4 <__swsetup_r+0xcc>)
 8005bda:	b570      	push	{r4, r5, r6, lr}
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	4606      	mov	r6, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	b125      	cbz	r5, 8005bee <__swsetup_r+0x16>
 8005be4:	69ab      	ldr	r3, [r5, #24]
 8005be6:	b913      	cbnz	r3, 8005bee <__swsetup_r+0x16>
 8005be8:	4628      	mov	r0, r5
 8005bea:	f7ff fb1b 	bl	8005224 <__sinit>
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <__swsetup_r+0xd0>)
 8005bf0:	429c      	cmp	r4, r3
 8005bf2:	d10f      	bne.n	8005c14 <__swsetup_r+0x3c>
 8005bf4:	686c      	ldr	r4, [r5, #4]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bfc:	0719      	lsls	r1, r3, #28
 8005bfe:	d42c      	bmi.n	8005c5a <__swsetup_r+0x82>
 8005c00:	06dd      	lsls	r5, r3, #27
 8005c02:	d411      	bmi.n	8005c28 <__swsetup_r+0x50>
 8005c04:	2309      	movs	r3, #9
 8005c06:	6033      	str	r3, [r6, #0]
 8005c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	e03e      	b.n	8005c92 <__swsetup_r+0xba>
 8005c14:	4b25      	ldr	r3, [pc, #148]	; (8005cac <__swsetup_r+0xd4>)
 8005c16:	429c      	cmp	r4, r3
 8005c18:	d101      	bne.n	8005c1e <__swsetup_r+0x46>
 8005c1a:	68ac      	ldr	r4, [r5, #8]
 8005c1c:	e7eb      	b.n	8005bf6 <__swsetup_r+0x1e>
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <__swsetup_r+0xd8>)
 8005c20:	429c      	cmp	r4, r3
 8005c22:	bf08      	it	eq
 8005c24:	68ec      	ldreq	r4, [r5, #12]
 8005c26:	e7e6      	b.n	8005bf6 <__swsetup_r+0x1e>
 8005c28:	0758      	lsls	r0, r3, #29
 8005c2a:	d512      	bpl.n	8005c52 <__swsetup_r+0x7a>
 8005c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2e:	b141      	cbz	r1, 8005c42 <__swsetup_r+0x6a>
 8005c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c34:	4299      	cmp	r1, r3
 8005c36:	d002      	beq.n	8005c3e <__swsetup_r+0x66>
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f991 	bl	8005f60 <_free_r>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6363      	str	r3, [r4, #52]	; 0x34
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6063      	str	r3, [r4, #4]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	81a3      	strh	r3, [r4, #12]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	b94b      	cbnz	r3, 8005c72 <__swsetup_r+0x9a>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c68:	d003      	beq.n	8005c72 <__swsetup_r+0x9a>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 f92b 	bl	8005ec8 <__smakebuf_r>
 8005c72:	89a0      	ldrh	r0, [r4, #12]
 8005c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c78:	f010 0301 	ands.w	r3, r0, #1
 8005c7c:	d00a      	beq.n	8005c94 <__swsetup_r+0xbc>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60a3      	str	r3, [r4, #8]
 8005c82:	6963      	ldr	r3, [r4, #20]
 8005c84:	425b      	negs	r3, r3
 8005c86:	61a3      	str	r3, [r4, #24]
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	b943      	cbnz	r3, 8005c9e <__swsetup_r+0xc6>
 8005c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c90:	d1ba      	bne.n	8005c08 <__swsetup_r+0x30>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	0781      	lsls	r1, r0, #30
 8005c96:	bf58      	it	pl
 8005c98:	6963      	ldrpl	r3, [r4, #20]
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	e7f4      	b.n	8005c88 <__swsetup_r+0xb0>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e7f7      	b.n	8005c92 <__swsetup_r+0xba>
 8005ca2:	bf00      	nop
 8005ca4:	20000010 	.word	0x20000010
 8005ca8:	0800613c 	.word	0x0800613c
 8005cac:	0800615c 	.word	0x0800615c
 8005cb0:	0800611c 	.word	0x0800611c

08005cb4 <_close_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	; (8005cd0 <_close_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fc fa6f 	bl	80021a2 <_close>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_close_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_close_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200002d8 	.word	0x200002d8

08005cd4 <__sflush_r>:
 8005cd4:	898a      	ldrh	r2, [r1, #12]
 8005cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	4605      	mov	r5, r0
 8005cdc:	0710      	lsls	r0, r2, #28
 8005cde:	460c      	mov	r4, r1
 8005ce0:	d458      	bmi.n	8005d94 <__sflush_r+0xc0>
 8005ce2:	684b      	ldr	r3, [r1, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dc05      	bgt.n	8005cf4 <__sflush_r+0x20>
 8005ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dc02      	bgt.n	8005cf4 <__sflush_r+0x20>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d0f9      	beq.n	8005cee <__sflush_r+0x1a>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d00:	682f      	ldr	r7, [r5, #0]
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	d032      	beq.n	8005d6c <__sflush_r+0x98>
 8005d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	075a      	lsls	r2, r3, #29
 8005d0c:	d505      	bpl.n	8005d1a <__sflush_r+0x46>
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	1ac0      	subs	r0, r0, r3
 8005d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d14:	b10b      	cbz	r3, 8005d1a <__sflush_r+0x46>
 8005d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d18:	1ac0      	subs	r0, r0, r3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d20:	6a21      	ldr	r1, [r4, #32]
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b0      	blx	r6
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	d106      	bne.n	8005d3a <__sflush_r+0x66>
 8005d2c:	6829      	ldr	r1, [r5, #0]
 8005d2e:	291d      	cmp	r1, #29
 8005d30:	d82c      	bhi.n	8005d8c <__sflush_r+0xb8>
 8005d32:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <__sflush_r+0x108>)
 8005d34:	40ca      	lsrs	r2, r1
 8005d36:	07d6      	lsls	r6, r2, #31
 8005d38:	d528      	bpl.n	8005d8c <__sflush_r+0xb8>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	6062      	str	r2, [r4, #4]
 8005d3e:	04d9      	lsls	r1, r3, #19
 8005d40:	6922      	ldr	r2, [r4, #16]
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	d504      	bpl.n	8005d50 <__sflush_r+0x7c>
 8005d46:	1c42      	adds	r2, r0, #1
 8005d48:	d101      	bne.n	8005d4e <__sflush_r+0x7a>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	b903      	cbnz	r3, 8005d50 <__sflush_r+0x7c>
 8005d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8005d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d52:	602f      	str	r7, [r5, #0]
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d0ca      	beq.n	8005cee <__sflush_r+0x1a>
 8005d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	d002      	beq.n	8005d66 <__sflush_r+0x92>
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 f8fd 	bl	8005f60 <_free_r>
 8005d66:	2000      	movs	r0, #0
 8005d68:	6360      	str	r0, [r4, #52]	; 0x34
 8005d6a:	e7c1      	b.n	8005cf0 <__sflush_r+0x1c>
 8005d6c:	6a21      	ldr	r1, [r4, #32]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b0      	blx	r6
 8005d74:	1c41      	adds	r1, r0, #1
 8005d76:	d1c7      	bne.n	8005d08 <__sflush_r+0x34>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0c4      	beq.n	8005d08 <__sflush_r+0x34>
 8005d7e:	2b1d      	cmp	r3, #29
 8005d80:	d001      	beq.n	8005d86 <__sflush_r+0xb2>
 8005d82:	2b16      	cmp	r3, #22
 8005d84:	d101      	bne.n	8005d8a <__sflush_r+0xb6>
 8005d86:	602f      	str	r7, [r5, #0]
 8005d88:	e7b1      	b.n	8005cee <__sflush_r+0x1a>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	e7ad      	b.n	8005cf0 <__sflush_r+0x1c>
 8005d94:	690f      	ldr	r7, [r1, #16]
 8005d96:	2f00      	cmp	r7, #0
 8005d98:	d0a9      	beq.n	8005cee <__sflush_r+0x1a>
 8005d9a:	0793      	lsls	r3, r2, #30
 8005d9c:	680e      	ldr	r6, [r1, #0]
 8005d9e:	bf08      	it	eq
 8005da0:	694b      	ldreq	r3, [r1, #20]
 8005da2:	600f      	str	r7, [r1, #0]
 8005da4:	bf18      	it	ne
 8005da6:	2300      	movne	r3, #0
 8005da8:	eba6 0807 	sub.w	r8, r6, r7
 8005dac:	608b      	str	r3, [r1, #8]
 8005dae:	f1b8 0f00 	cmp.w	r8, #0
 8005db2:	dd9c      	ble.n	8005cee <__sflush_r+0x1a>
 8005db4:	6a21      	ldr	r1, [r4, #32]
 8005db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005db8:	4643      	mov	r3, r8
 8005dba:	463a      	mov	r2, r7
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b0      	blx	r6
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	dc06      	bgt.n	8005dd2 <__sflush_r+0xfe>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e78e      	b.n	8005cf0 <__sflush_r+0x1c>
 8005dd2:	4407      	add	r7, r0
 8005dd4:	eba8 0800 	sub.w	r8, r8, r0
 8005dd8:	e7e9      	b.n	8005dae <__sflush_r+0xda>
 8005dda:	bf00      	nop
 8005ddc:	20400001 	.word	0x20400001

08005de0 <_fflush_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	4605      	mov	r5, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	b913      	cbnz	r3, 8005df0 <_fflush_r+0x10>
 8005dea:	2500      	movs	r5, #0
 8005dec:	4628      	mov	r0, r5
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	b118      	cbz	r0, 8005dfa <_fflush_r+0x1a>
 8005df2:	6983      	ldr	r3, [r0, #24]
 8005df4:	b90b      	cbnz	r3, 8005dfa <_fflush_r+0x1a>
 8005df6:	f7ff fa15 	bl	8005224 <__sinit>
 8005dfa:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <_fflush_r+0x6c>)
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	d11b      	bne.n	8005e38 <_fflush_r+0x58>
 8005e00:	686c      	ldr	r4, [r5, #4]
 8005e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0ef      	beq.n	8005dea <_fflush_r+0xa>
 8005e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e0c:	07d0      	lsls	r0, r2, #31
 8005e0e:	d404      	bmi.n	8005e1a <_fflush_r+0x3a>
 8005e10:	0599      	lsls	r1, r3, #22
 8005e12:	d402      	bmi.n	8005e1a <_fflush_r+0x3a>
 8005e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e16:	f7ff faa3 	bl	8005360 <__retarget_lock_acquire_recursive>
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f7ff ff59 	bl	8005cd4 <__sflush_r>
 8005e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e24:	07da      	lsls	r2, r3, #31
 8005e26:	4605      	mov	r5, r0
 8005e28:	d4e0      	bmi.n	8005dec <_fflush_r+0xc>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	059b      	lsls	r3, r3, #22
 8005e2e:	d4dd      	bmi.n	8005dec <_fflush_r+0xc>
 8005e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e32:	f7ff fa96 	bl	8005362 <__retarget_lock_release_recursive>
 8005e36:	e7d9      	b.n	8005dec <_fflush_r+0xc>
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <_fflush_r+0x70>)
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d101      	bne.n	8005e42 <_fflush_r+0x62>
 8005e3e:	68ac      	ldr	r4, [r5, #8]
 8005e40:	e7df      	b.n	8005e02 <_fflush_r+0x22>
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <_fflush_r+0x74>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	bf08      	it	eq
 8005e48:	68ec      	ldreq	r4, [r5, #12]
 8005e4a:	e7da      	b.n	8005e02 <_fflush_r+0x22>
 8005e4c:	0800613c 	.word	0x0800613c
 8005e50:	0800615c 	.word	0x0800615c
 8005e54:	0800611c 	.word	0x0800611c

08005e58 <_lseek_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	; (8005e78 <_lseek_r+0x20>)
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fc f9c2 	bl	80021f0 <_lseek>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_lseek_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_lseek_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	200002d8 	.word	0x200002d8

08005e7c <__swhatbuf_r>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	460e      	mov	r6, r1
 8005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	b096      	sub	sp, #88	; 0x58
 8005e88:	4614      	mov	r4, r2
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	da08      	bge.n	8005ea0 <__swhatbuf_r+0x24>
 8005e8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	061a      	lsls	r2, r3, #24
 8005e98:	d410      	bmi.n	8005ebc <__swhatbuf_r+0x40>
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	e00e      	b.n	8005ebe <__swhatbuf_r+0x42>
 8005ea0:	466a      	mov	r2, sp
 8005ea2:	f000 f8bb 	bl	800601c <_fstat_r>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	dbf1      	blt.n	8005e8e <__swhatbuf_r+0x12>
 8005eaa:	9a01      	ldr	r2, [sp, #4]
 8005eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eb4:	425a      	negs	r2, r3
 8005eb6:	415a      	adcs	r2, r3
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	e7ee      	b.n	8005e9a <__swhatbuf_r+0x1e>
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	b016      	add	sp, #88	; 0x58
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ec8 <__smakebuf_r>:
 8005ec8:	898b      	ldrh	r3, [r1, #12]
 8005eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ecc:	079d      	lsls	r5, r3, #30
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	d507      	bpl.n	8005ee4 <__smakebuf_r+0x1c>
 8005ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	2301      	movs	r3, #1
 8005ede:	6163      	str	r3, [r4, #20]
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	ab01      	add	r3, sp, #4
 8005ee6:	466a      	mov	r2, sp
 8005ee8:	f7ff ffc8 	bl	8005e7c <__swhatbuf_r>
 8005eec:	9900      	ldr	r1, [sp, #0]
 8005eee:	4605      	mov	r5, r0
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff fa57 	bl	80053a4 <_malloc_r>
 8005ef6:	b948      	cbnz	r0, 8005f0c <__smakebuf_r+0x44>
 8005ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efc:	059a      	lsls	r2, r3, #22
 8005efe:	d4ef      	bmi.n	8005ee0 <__smakebuf_r+0x18>
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	f043 0302 	orr.w	r3, r3, #2
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	e7e3      	b.n	8005ed4 <__smakebuf_r+0xc>
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <__smakebuf_r+0x7c>)
 8005f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	6163      	str	r3, [r4, #20]
 8005f1e:	9b01      	ldr	r3, [sp, #4]
 8005f20:	6120      	str	r0, [r4, #16]
 8005f22:	b15b      	cbz	r3, 8005f3c <__smakebuf_r+0x74>
 8005f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f000 f889 	bl	8006040 <_isatty_r>
 8005f2e:	b128      	cbz	r0, 8005f3c <__smakebuf_r+0x74>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	89a0      	ldrh	r0, [r4, #12]
 8005f3e:	4305      	orrs	r5, r0
 8005f40:	81a5      	strh	r5, [r4, #12]
 8005f42:	e7cd      	b.n	8005ee0 <__smakebuf_r+0x18>
 8005f44:	080051bd 	.word	0x080051bd

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f7ff ba09 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	200002cc 	.word	0x200002cc

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f7ff ba04 	b.w	8005362 <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	200002cc 	.word	0x200002cc

08005f60 <_free_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d044      	beq.n	8005ff0 <_free_r+0x90>
 8005f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f72:	bfb8      	it	lt
 8005f74:	18e4      	addlt	r4, r4, r3
 8005f76:	f7ff ffe7 	bl	8005f48 <__malloc_lock>
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <_free_r+0x94>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	b933      	cbnz	r3, 8005f90 <_free_r+0x30>
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	b003      	add	sp, #12
 8005f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8c:	f7ff bfe2 	b.w	8005f54 <__malloc_unlock>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d908      	bls.n	8005fa6 <_free_r+0x46>
 8005f94:	6825      	ldr	r5, [r4, #0]
 8005f96:	1961      	adds	r1, r4, r5
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	e7ed      	b.n	8005f82 <_free_r+0x22>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b10b      	cbz	r3, 8005fb0 <_free_r+0x50>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d9fa      	bls.n	8005fa6 <_free_r+0x46>
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	1855      	adds	r5, r2, r1
 8005fb4:	42a5      	cmp	r5, r4
 8005fb6:	d10b      	bne.n	8005fd0 <_free_r+0x70>
 8005fb8:	6824      	ldr	r4, [r4, #0]
 8005fba:	4421      	add	r1, r4
 8005fbc:	1854      	adds	r4, r2, r1
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	6011      	str	r1, [r2, #0]
 8005fc2:	d1e0      	bne.n	8005f86 <_free_r+0x26>
 8005fc4:	681c      	ldr	r4, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	6053      	str	r3, [r2, #4]
 8005fca:	4421      	add	r1, r4
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	e7da      	b.n	8005f86 <_free_r+0x26>
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x78>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6003      	str	r3, [r0, #0]
 8005fd6:	e7d6      	b.n	8005f86 <_free_r+0x26>
 8005fd8:	6825      	ldr	r5, [r4, #0]
 8005fda:	1961      	adds	r1, r4, r5
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf04      	itt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	bf04      	itt	eq
 8005fe8:	1949      	addeq	r1, r1, r5
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	6054      	str	r4, [r2, #4]
 8005fee:	e7ca      	b.n	8005f86 <_free_r+0x26>
 8005ff0:	b003      	add	sp, #12
 8005ff2:	bd30      	pop	{r4, r5, pc}
 8005ff4:	200002d0 	.word	0x200002d0

08005ff8 <_read_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	; (8006018 <_read_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fc f892 	bl	8002130 <_read>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_read_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_read_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200002d8 	.word	0x200002d8

0800601c <_fstat_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_fstat_r+0x20>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f7fc f8c6 	bl	80021ba <_fstat>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d102      	bne.n	8006038 <_fstat_r+0x1c>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	b103      	cbz	r3, 8006038 <_fstat_r+0x1c>
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	bf00      	nop
 800603c:	200002d8 	.word	0x200002d8

08006040 <_isatty_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	; (800605c <_isatty_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fc f8c5 	bl	80021da <_isatty>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_isatty_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_isatty_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	200002d8 	.word	0x200002d8

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
